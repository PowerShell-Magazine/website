<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OMI on PowerShell Magazine | For the most powerful community</title>
    <link>https://psmag.github.io/tags/omi/</link>
    <description>Recent content in OMI on PowerShell Magazine | For the most powerful community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Mar 2015 16:00:02 +0000</lastBuildDate>
    
	<atom:link href="https://psmag.github.io/tags/omi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OMI with WSMan over HTTPS: Done right.</title>
      <link>https://psmag.github.io/2015/03/23/omi-with-wsman-over-https-done-right/</link>
      <pubDate>Mon, 23 Mar 2015 16:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/03/23/omi-with-wsman-over-https-done-right/</guid>
      <description>When you install OMI for the first time, a pair of keys is generated for you. When an automated process is used, the only option that will “just work” is to generate self-signed certificate.</description>
    </item>
    
    <item>
      <title>Working with PowerShell DSC for Linux, part 5</title>
      <link>https://psmag.github.io/2015/02/27/working-with-powershell-dsc-for-linux-part-5/</link>
      <pubDate>Fri, 27 Feb 2015 17:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/02/27/working-with-powershell-dsc-for-linux-part-5/</guid>
      <description>Managing Linux can become a challenge if you don’t have some way of distributing credentials. There are several options: joining Active Directory domain and using shared credentials for both Linux and Windows, using other LDAP implementation to authenticate or distribute users/groups using Configuration Management tools.</description>
    </item>
    
    <item>
      <title>Working with PowerShell DSC for Linux, part 4</title>
      <link>https://psmag.github.io/2015/02/26/working-with-powershell-dsc-for-linux-part-4/</link>
      <pubDate>Thu, 26 Feb 2015 17:00:57 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/02/26/working-with-powershell-dsc-for-linux-part-4/</guid>
      <description>CTP of Linux DSC that was released last year has only five resources: nxService, nxFile, nxUser, nxGroup, and nxScript. Things like package management, network configuration, firewall settings, jobs scheduled in crontab don’t have coverage in resources.</description>
    </item>
    
    <item>
      <title>Working with PowerShell DSC for Linux, part 3</title>
      <link>https://psmag.github.io/2015/02/25/working-with-powershell-dsc-for-linux-part-3/</link>
      <pubDate>Wed, 25 Feb 2015 17:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/02/25/working-with-powershell-dsc-for-linux-part-3/</guid>
      <description>Linux is a system that stores configuration in text files. As a result, nxFile should be considered one of two most powerful resources offered in the CTP release.</description>
    </item>
    
    <item>
      <title>Working with PowerShell DSC for Linux, part 2</title>
      <link>https://psmag.github.io/2015/02/23/working-with-powershell-dsc-for-linux-part-2/</link>
      <pubDate>Mon, 23 Feb 2015 17:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/02/23/working-with-powershell-dsc-for-linux-part-2/</guid>
      <description>PowerShell DSC for Linux caught my attention immediately after it was announced. Being able to control configuration of Linux box with pure PowerShell code is huge for anybody who is interested in cross-platform solutions build in PowerShell.</description>
    </item>
    
    <item>
      <title>Working with PowerShell DSC for Linux, part 1</title>
      <link>https://psmag.github.io/2015/02/21/working-with-powershell-dsc-for-linux-part-1/</link>
      <pubDate>Sun, 22 Feb 2015 00:15:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/02/21/working-with-powershell-dsc-for-linux-part-1/</guid>
      <description>In the first part of this series, we covered the basis–how to get Desired State Configuration to do what the name promises: keep desired state consistent.</description>
    </item>
    
    <item>
      <title>OMI and NetworkSwitch module</title>
      <link>https://psmag.github.io/2014/09/02/omi-and-networkswitch-module/</link>
      <pubDate>Tue, 02 Sep 2014 16:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/09/02/omi-and-networkswitch-module/</guid>
      <description>One of the first tasks I used PowerShell for was related to Windows Management Instrumentation (WMI). I had heard about WMI before I started my adventure with PowerShell, but never tried it myself.</description>
    </item>
    
  </channel>
</rss>