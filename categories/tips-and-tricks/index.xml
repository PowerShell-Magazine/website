<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips and Tricks on PowerShell Magazine | For the most powerful community</title>
    <link>https://psmag.github.io/categories/tips-and-tricks/</link>
    <description>Recent content in Tips and Tricks on PowerShell Magazine | For the most powerful community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jun 2019 05:41:49 +0000</lastBuildDate>
    
	<atom:link href="https://psmag.github.io/categories/tips-and-tricks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#PSTip A Better Way to Generate HTTP Query Strings in PowerShell</title>
      <link>https://psmag.github.io/2019/06/14/pstip-a-better-way-to-generate-http-query-strings-in-powershell/</link>
      <pubDate>Fri, 14 Jun 2019 05:41:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2019/06/14/pstip-a-better-way-to-generate-http-query-strings-in-powershell/</guid>
      <description>While working on a module that interacts with REST API, I came across a situation where I had to generate query strings.</description>
    </item>
    
    <item>
      <title>#PSTip Tab complete properties</title>
      <link>https://psmag.github.io/2016/10/31/pstip-tab-complete-properties/</link>
      <pubDate>Mon, 31 Oct 2016 16:00:45 +0000</pubDate>
      
      <guid>https://psmag.github.io/2016/10/31/pstip-tab-complete-properties/</guid>
      <description>Tab completion is a well-known feature in PowerShell, which speeds up the process of typing and reduces the risk for typing mistakes.</description>
    </item>
    
    <item>
      <title>#PSTip New PowerShell Commands in Windows 10 Anniversary Update</title>
      <link>https://psmag.github.io/2016/08/02/pstip-new-powershell-commands-in-windows-10-anniversary-update/</link>
      <pubDate>Tue, 02 Aug 2016 16:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2016/08/02/pstip-new-powershell-commands-in-windows-10-anniversary-update/</guid>
      <description>Windows 10 Anniversary Update was made generally available on August 2, 2016.
Included in the update is a new version of Windows Management Framework, which has now reached version 5.</description>
    </item>
    
    <item>
      <title>#PSTip Download and install Sysinternals Suite for Nano Server</title>
      <link>https://psmag.github.io/2016/07/06/pstip-download-and-install-sysinternals-suite-for-nano-server/</link>
      <pubDate>Wed, 06 Jul 2016 16:00:27 +0000</pubDate>
      
      <guid>https://psmag.github.io/2016/07/06/pstip-download-and-install-sysinternals-suite-for-nano-server/</guid>
      <description>The Sysinternals Suite, which contains many tools an IT Professional should have in the tool belt, is now available for Nano Server.</description>
    </item>
    
    <item>
      <title>#PSTip Convert PowerShell Data File to an Object</title>
      <link>https://psmag.github.io/2016/05/11/pstip-convert-powershell-data-file-to-an-object/</link>
      <pubDate>Wed, 11 May 2016 18:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2016/05/11/pstip-convert-powershell-data-file-to-an-object/</guid>
      <description>Note: This tip requires PowerShell 4.0 or later.
Before PowerShell 4.0, if we had to convert the hash table in a PSD1 file into an object representation, we either used the Import-LocalizedData cmdlet (not really meant for this purpose) or other means.</description>
    </item>
    
    <item>
      <title>#PSTip Using PowerShell runspaces to find unassigned IPv4 addresses</title>
      <link>https://psmag.github.io/2015/09/07/pstip-using-powershell-runspaces-to-find-unassigned-ipv4-addresses/</link>
      <pubDate>Mon, 07 Sep 2015 15:58:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/09/07/pstip-using-powershell-runspaces-to-find-unassigned-ipv4-addresses/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
We often come across infrastructure configuration scenarios where we need to find a free IP address before assigning the same to a server in an automated manner.</description>
    </item>
    
    <item>
      <title>#PSTip Validate Active Directory Credentials</title>
      <link>https://psmag.github.io/2015/09/04/pstip-validate-active-directory-credentials/</link>
      <pubDate>Fri, 04 Sep 2015 16:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/09/04/pstip-validate-active-directory-credentials/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
PowerShell let’s you tap into .NET Framework and do all kind of poking.</description>
    </item>
    
    <item>
      <title>#PSTip Find variables in a script</title>
      <link>https://psmag.github.io/2015/06/22/pstip-find-variables-in-a-script/</link>
      <pubDate>Mon, 22 Jun 2015 18:00:16 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/22/pstip-find-variables-in-a-script/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
I had recently completed writing a PowerShell module for an internal project. Within this module, I ended up using variables in the Script scope to share data between different parts of the module.</description>
    </item>
    
    <item>
      <title>#PSTip Convert .docx to .pdf using Word.Application</title>
      <link>https://psmag.github.io/2015/06/11/pstip-convert-docx-to-pdf-using-word-application/</link>
      <pubDate>Thu, 11 Jun 2015 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/11/pstip-convert-docx-to-pdf-using-word-application/</guid>
      <description>The Word.Application object can be used to convert Word documents into PDF files using soda pdf software, is handy and convenient, has privacy/security as you need to upload your files to the developer’s server.</description>
    </item>
    
    <item>
      <title>#PSTip Determine compression ratio of compressed files</title>
      <link>https://psmag.github.io/2015/06/10/pstip-determine-compression-ratio-of-compressed-files/</link>
      <pubDate>Wed, 10 Jun 2015 18:00:55 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/10/pstip-determine-compression-ratio-of-compressed-files/</guid>
      <description>In the previous #PSTip Compress files and folders with System.IO.Compression.FileSystem class, a .zip file was created and extracted. Now it might be good to know the compression ratio to see how much storage space has been saved by compressing the files.</description>
    </item>
    
    <item>
      <title>#PSTip Compress files and folders with System.IO.Compression.FileSystem class</title>
      <link>https://psmag.github.io/2015/06/09/pstip-compress-files-and-folders-with-system-io-compression-filesystem-class/</link>
      <pubDate>Tue, 09 Jun 2015 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/09/pstip-compress-files-and-folders-with-system-io-compression-filesystem-class/</guid>
      <description>Using the CreateFromDirectory and ExtractToDirectory methods, it is possible to compress and extract files. In this tip I will show different constructors that can be used to either compress or extract files using this class.</description>
    </item>
    
    <item>
      <title>#PSTip Use Shell.Application to determine which folder is open in File Explorer</title>
      <link>https://psmag.github.io/2015/06/08/pstip-use-shell-application-to-determine-which-folder-is-open-in-file-explorer/</link>
      <pubDate>Mon, 08 Jun 2015 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/08/pstip-use-shell-application-to-determine-which-folder-is-open-in-file-explorer/</guid>
      <description>By using the Windows() method and the LocationURL and LocationName properties we can programmatically determine which folder is open in File Explorer.</description>
    </item>
    
    <item>
      <title>#PSTip Get last login date for local account</title>
      <link>https://psmag.github.io/2015/06/05/pstip-get-last-login-date-for-local-account/</link>
      <pubDate>Fri, 05 Jun 2015 18:00:14 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/05/pstip-get-last-login-date-for-local-account/</guid>
      <description>Using the ADSI type accelerator in combination with WinNT provider we can retrieve the last logon time for a local account from the local SAM account database:</description>
    </item>
    
    <item>
      <title>#PSTip Access remote registry using PowerShell</title>
      <link>https://psmag.github.io/2015/06/04/pstip-access-remote-registry-using-powershell/</link>
      <pubDate>Thu, 04 Jun 2015 21:28:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/06/04/pstip-access-remote-registry-using-powershell/</guid>
      <description>Using the Microsoft.Win32.Registry class it is possible to access both–the local registry and, more importantly, the registry of a remote system.</description>
    </item>
    
    <item>
      <title>#PSTip Validate if an Active Directory Organizational Unit exists or not</title>
      <link>https://psmag.github.io/2015/05/29/pstip-validate-if-an-active-directory-organizational-unit-exists-or-not/</link>
      <pubDate>Fri, 29 May 2015 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/05/29/pstip-validate-if-an-active-directory-organizational-unit-exists-or-not/</guid>
      <description>For some recent scripting work, I needed to find if an AD OU existed or not from a computer that is not domain-joined.</description>
    </item>
    
    <item>
      <title>PSTip: Connect to Azure Virtual Machines without being prompted for credentials</title>
      <link>https://psmag.github.io/2015/04/16/pstip-connect-to-azure-virtual-machines-without-being-prompted-for-credentials/</link>
      <pubDate>Thu, 16 Apr 2015 16:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/16/pstip-connect-to-azure-virtual-machines-without-being-prompted-for-credentials/</guid>
      <description>When working with Azure it can be useful to quickly connect to a number of Azure VMs. Unfortunately this might result in having to enter your password multiple times.</description>
    </item>
    
    <item>
      <title>PSTip: Change a drive letter using Win32_Volume class</title>
      <link>https://psmag.github.io/2015/04/15/pstip-change-a-drive-letter-using-win32_volume-class/</link>
      <pubDate>Wed, 15 Apr 2015 16:00:29 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/15/pstip-change-a-drive-letter-using-win32_volume-class/</guid>
      <description>Changing a drive letter of a removable drive or DVD drive is an easy task with Windows PowerShell. Using the Win32_Volume class and the Set-CimInstance cmdlet a drive letter can be reassigned.</description>
    </item>
    
    <item>
      <title>PSTip: Save untitled tabs in PowerShell ISE to clipboard</title>
      <link>https://psmag.github.io/2015/04/14/pstip-save-untitled-tabs-in-powershell-ise-to-clipboard/</link>
      <pubDate>Tue, 14 Apr 2015 16:00:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/14/pstip-save-untitled-tabs-in-powershell-ise-to-clipboard/</guid>
      <description>When working with the PowerShell ISE it can occur that there are a lot of untitled scripts left at the end of a busy day of scripting.</description>
    </item>
    
    <item>
      <title>PSTip: Use Shell.Application to display extended file attributes</title>
      <link>https://psmag.github.io/2015/04/13/pstip-use-shell-application-to-display-extended-file-attributes/</link>
      <pubDate>Mon, 13 Apr 2015 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/13/pstip-use-shell-application-to-display-extended-file-attributes/</guid>
      <description>In Windows files can have a lot of additional file attributes that are not shown when using the Get-ChildItem cmdlet. To reveal these the Shell.</description>
    </item>
    
    <item>
      <title>PSTip: Retrieve scheduled tasks using Schedule.Service COMObject</title>
      <link>https://psmag.github.io/2015/04/10/pstip-retrieve-scheduled-tasks-using-schedule-service-comobject/</link>
      <pubDate>Fri, 10 Apr 2015 18:00:43 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/10/pstip-retrieve-scheduled-tasks-using-schedule-service-comobject/</guid>
      <description>In PowerShell 4.0, the Get-ScheduledTask cmdlet was introduced, but unfortunately this cmdlet is not available in older versions of PowerShell. This is where the Schedule.</description>
    </item>
    
    <item>
      <title>PSTip: Use Windows Forms to generate GUI messagebox</title>
      <link>https://psmag.github.io/2015/04/09/pstip-use-windows-forms-to-generate-gui-messagebox/</link>
      <pubDate>Thu, 09 Apr 2015 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2015/04/09/pstip-use-windows-forms-to-generate-gui-messagebox/</guid>
      <description>While it is great that PowerShell can do so many things in the background without having to interact with it, occasionally it might be useful to have a graphical notification.</description>
    </item>
    
    <item>
      <title>#PSTip Editing remote file in PowerShell ISE</title>
      <link>https://psmag.github.io/2014/12/08/pstip-editing-remote-file-in-powershell-ise/</link>
      <pubDate>Mon, 08 Dec 2014 19:49:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/12/08/pstip-editing-remote-file-in-powershell-ise/</guid>
      <description>Note: This tip requires PowerShell 5.0 or later.
If you have ever wondered how you can edit files on a remote system using Windows PowerShell, it is now possible with PowerShell 5.</description>
    </item>
    
    <item>
      <title>#PSTip Replacing special characters</title>
      <link>https://psmag.github.io/2014/08/26/pstip-replacing-special-characters/</link>
      <pubDate>Tue, 26 Aug 2014 18:00:48 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/26/pstip-replacing-special-characters/</guid>
      <description>Once upon a time I answered Stack Overflow question about easy way to replace ‘special’ characters with something ‘web safe’. I answered question with the following code:</description>
    </item>
    
    <item>
      <title>#PSTip Taking control of verbose and debug output, part 5</title>
      <link>https://psmag.github.io/2014/08/15/pstip-taking-control-of-verbose-and-debug-output-part-5/</link>
      <pubDate>Fri, 15 Aug 2014 18:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/15/pstip-taking-control-of-verbose-and-debug-output-part-5/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
In the final part of the series, we will combine everything we’ve found out so far and create a tool that will identify any command that needs to be wrapped by advanced function in order to make access to verbose and debug messages easy and natural.</description>
    </item>
    
    <item>
      <title>#PSTip Taking control of verbose and debug output, part 4</title>
      <link>https://psmag.github.io/2014/08/14/pstip-taking-control-of-verbose-and-debug-output-part-4/</link>
      <pubDate>Thu, 14 Aug 2014 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/14/pstip-taking-control-of-verbose-and-debug-output-part-4/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
PowerShell commands, both advanced and simple, can work with the pipeline. The difference is that in the simple commands access to pipeline is implicit with $_ automatic variable.</description>
    </item>
    
    <item>
      <title>#PSTip Taking control of verbose and debug output, part 3</title>
      <link>https://psmag.github.io/2014/08/13/pstip-taking-control-of-verbose-and-debug-output-part-3/</link>
      <pubDate>Wed, 13 Aug 2014 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/13/pstip-taking-control-of-verbose-and-debug-output-part-3/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
In the first two tips of this series we focused on the problem.</description>
    </item>
    
    <item>
      <title>#PSTip Taking control of verbose and debug output, part 2</title>
      <link>https://psmag.github.io/2014/08/12/pstip-taking-control-of-verbose-and-debug-output-part-2/</link>
      <pubDate>Tue, 12 Aug 2014 18:00:39 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/12/pstip-taking-control-of-verbose-and-debug-output-part-2/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
In the first part of this series, we identified the problem–commands (scripts or functions) that ‘partially’ support verbose and debug messages.</description>
    </item>
    
    <item>
      <title>#PSTip Taking control of verbose and debug output, part 1</title>
      <link>https://psmag.github.io/2014/08/11/pstip-taking-control-of-verbose-and-debug-output-part-1/</link>
      <pubDate>Mon, 11 Aug 2014 21:37:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/11/pstip-taking-control-of-verbose-and-debug-output-part-1/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
One of the PowerShell features that makes writing scripts and functions easier is ability to produce different types of output.</description>
    </item>
    
    <item>
      <title>#PSTip Generating a self-signed certificate</title>
      <link>https://psmag.github.io/2014/08/08/pstip-generating-a-self-signed-certificate/</link>
      <pubDate>Fri, 08 Aug 2014 18:00:50 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/08/pstip-generating-a-self-signed-certificate/</guid>
      <description>Self-signed certificates might be needed for different purposes, such as the test environments. A more practical example is Azure Recovery Services where self-signed certificates can be used as vault certificates.</description>
    </item>
    
    <item>
      <title>#PSTip Configuring trunk mode in Hyper-V</title>
      <link>https://psmag.github.io/2014/08/06/configuring-trunk-mode-in-hyper-v/</link>
      <pubDate>Wed, 06 Aug 2014 18:00:29 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/08/06/configuring-trunk-mode-in-hyper-v/</guid>
      <description>With the introduction of Hyper-V in Windows Server 2012, the Hyper-V Extensible Switch became available providing more functionality than previous versions.</description>
    </item>
    
    <item>
      <title>#PSTip Functions and SQL filtering, Part 4</title>
      <link>https://psmag.github.io/2014/07/31/pstip-functions-and-sql-filtering-part-4/</link>
      <pubDate>Thu, 31 Jul 2014 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/31/pstip-functions-and-sql-filtering-part-4/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
Filtering information retrieved from SQL database should not be limited to text filters only.</description>
    </item>
    
    <item>
      <title>#PSTip Functions and SQL filtering, Part 3</title>
      <link>https://psmag.github.io/2014/07/30/pstip-functions-and-sql-filtering-part-3/</link>
      <pubDate>Wed, 30 Jul 2014 18:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/30/pstip-functions-and-sql-filtering-part-3/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
Whenever we retrieve information from SQL database we are faced with the problem: are we happy with column names defined in database schema?</description>
    </item>
    
    <item>
      <title>#PSTip Functions and SQL filtering, Part 2</title>
      <link>https://psmag.github.io/2014/07/29/pstip-functions-and-sql-filtering-part-2/</link>
      <pubDate>Tue, 29 Jul 2014 18:00:38 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/29/pstip-functions-and-sql-filtering-part-2/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
Adding support for easy filtering on individual table columns is great, but the fact that user would have to use SQL wildcard syntax rather than wildcards that he is used to, makes it feel like a partial solution.</description>
    </item>
    
    <item>
      <title>#PSTip Functions and SQL filtering, Part 1</title>
      <link>https://psmag.github.io/2014/07/28/pstip-functions-and-sql-filtering-part-1/</link>
      <pubDate>Mon, 28 Jul 2014 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/28/pstip-functions-and-sql-filtering-part-1/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
This is the first tip in a series of SQL filtering tips.</description>
    </item>
    
    <item>
      <title>#PSTip Show friendly GPO names with Get-ADOrganizationalUnit</title>
      <link>https://psmag.github.io/2014/07/25/pstip-show-friendly-gpo-names-with-get-adorganizationalunit/</link>
      <pubDate>Fri, 25 Jul 2014 18:00:25 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/25/pstip-show-friendly-gpo-names-with-get-adorganizationalunit/</guid>
      <description>When using the Get-ADOrganizationalUnit cmdlet there is a property available, LinkedGroupPolicyObjects. Unfortunately, that property only displays the GUID of the Group Policy Objects.</description>
    </item>
    
    <item>
      <title>#PSTip Select non-administrative shared folders using Win32_Share WMI class</title>
      <link>https://psmag.github.io/2014/07/24/pstip-select-non-administrative-shared-folders-using-win32_share-wmi-class/</link>
      <pubDate>Thu, 24 Jul 2014 18:00:04 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/24/pstip-select-non-administrative-shared-folders-using-win32_share-wmi-class/</guid>
      <description>Note: This tip required PowerShell 3.0 or above
The Win32_Share WMI class can be used to enumerate all shares on the local or remote system.</description>
    </item>
    
    <item>
      <title>#PSTip Enumerating mapped network drives using WScript.Network</title>
      <link>https://psmag.github.io/2014-07-23-pstip-enumerating-mapped-network-drives-using-wscript-network/</link>
      <pubDate>Wed, 23 Jul 2014 18:00:24 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014-07-23-pstip-enumerating-mapped-network-drives-using-wscript-network/</guid>
      <description>In the ‘Create mapped network drive using WScript.Network‘ tip, it was shown how a mapped drive can be mounted. The WScript.</description>
    </item>
    
    <item>
      <title>#PSTip Rename a local or a mapped drive using Shell.Application</title>
      <link>https://psmag.github.io/2014/07/22/pstip-rename-a-local-or-a-mapped-drive-using-shell-application/</link>
      <pubDate>Tue, 22 Jul 2014 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/22/pstip-rename-a-local-or-a-mapped-drive-using-shell-application/</guid>
      <description>In the ‘Create mapped network drive using WScript.Network‘ post, it was shown how a mapped drive can be mounted. The mapped drive doesn’t initially have a friendly name–only the name of the shared folder and the server name will be shown.</description>
    </item>
    
    <item>
      <title>#PSTip Create mapped network drive using WScript.Network</title>
      <link>https://psmag.github.io/2014/07/21/pstip-create-mapped-network-drive-using-wscript-network/</link>
      <pubDate>Mon, 21 Jul 2014 18:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/21/pstip-create-mapped-network-drive-using-wscript-network/</guid>
      <description>There are multiple methods of mapping network drives in PowerShell. In the past the net.exe tool was used and since PowerShell 3.</description>
    </item>
    
    <item>
      <title>#PSTip Automatically persist history</title>
      <link>https://psmag.github.io/2014/07/14/pstip-automatically-persist-history/</link>
      <pubDate>Mon, 14 Jul 2014 18:00:09 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/14/pstip-automatically-persist-history/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
By leveraging engine events and PowerShell profile scripts we can automatically persist command history to disk, and import it in the next session.</description>
    </item>
    
    <item>
      <title>#PSTip Quick objects using ConvertFrom-Csv</title>
      <link>https://psmag.github.io/2014/07/10/pstip-quick-objects-using-convertfrom-csv/</link>
      <pubDate>Thu, 10 Jul 2014 18:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/10/pstip-quick-objects-using-convertfrom-csv/</guid>
      <description>Note: This tip requires PowerShell 2.0 or later.
PowerShell is designed to operate on objects. But, what can we do if all we have is text e.</description>
    </item>
    
    <item>
      <title>#PSTip Decoding an HTML-encoded string</title>
      <link>https://psmag.github.io/2014/07/09/pstip-decoding-an-html-encoded-string/</link>
      <pubDate>Wed, 09 Jul 2014 18:00:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/09/pstip-decoding-an-html-encoded-string/</guid>
      <description>In my previous tip, I showed some of my favorite methods to convert date time string to the local time. In the same context of RSS feeds, I sometimes find the description text in the RSS feed is HTML-encoded.</description>
    </item>
    
    <item>
      <title>#PSTip Converting to the local time</title>
      <link>https://psmag.github.io/2014/07/08/pstip-converting-to-the-local-time/</link>
      <pubDate>Tue, 08 Jul 2014 18:00:13 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/08/pstip-converting-to-the-local-time/</guid>
      <description>Several RSS feeds that I refer regularly have a publication date set to another time zone. For my own tracking purpose, I needed a way to convert it to the local time zone and store the date.</description>
    </item>
    
    <item>
      <title>#PSTip Finding if a system has PowerShell 4.0 or later</title>
      <link>https://psmag.github.io/2014/07/07/pstip-finding-if-a-system-has-powershell-4-0-or-later/</link>
      <pubDate>Mon, 07 Jul 2014 18:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/07/pstip-finding-if-a-system-has-powershell-4-0-or-later/</guid>
      <description>Note: This tip requires PowerShell 3.0 or later.
I was looking for a way to find if systems in my environment have PowerShell 4.</description>
    </item>
    
    <item>
      <title>#PSTip Finding keyboard keys</title>
      <link>https://psmag.github.io/2014/07/03/pstip-finding-keyboard-keys/</link>
      <pubDate>Thu, 03 Jul 2014 18:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/03/pstip-finding-keyboard-keys/</guid>
      <description>A previous article in PowerShell Magazine describes how to find keyboard shortcuts in the PowerShell ISE. In this tip we will look at how we can find a key we do not know.</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 6</title>
      <link>https://psmag.github.io/2014/07/02/pstip-using-xpath-in-powershell-part-6/</link>
      <pubDate>Wed, 02 Jul 2014 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/02/pstip-using-xpath-in-powershell-part-6/</guid>
      <description>When we analyze XML documents with XPath we may need information about number of certain items. For example, we can have an XHTML document with several tables and we can easily check which tables contain rows with ‘class’ attribute:</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 5</title>
      <link>https://psmag.github.io/2014/07/01/pstip-using-xpath-in-powershell-part-5/</link>
      <pubDate>Tue, 01 Jul 2014 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/07/01/pstip-using-xpath-in-powershell-part-5/</guid>
      <description>XPath has one big disadvantage–it’s case sensitive. Unlike regular expressions, there is no way to “turn it off”. But there is a way around it.</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 4</title>
      <link>https://psmag.github.io/2014/06/30/pstip-using-xpath-in-powershell-part-4/</link>
      <pubDate>Mon, 30 Jun 2014 18:00:24 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/30/pstip-using-xpath-in-powershell-part-4/</guid>
      <description>Filtering using XPath is not limited to queries that make sure that existing value is equal to value that we are interested in.</description>
    </item>
    
    <item>
      <title>#PSTip How to properly validate GUID parameter</title>
      <link>https://psmag.github.io/2014/06/27/pstip-how-to-properly-validate-guid-parameter/</link>
      <pubDate>Fri, 27 Jun 2014 18:00:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/27/pstip-how-to-properly-validate-guid-parameter/</guid>
      <description>Most of you probably know how to create a Globally Unique Identifier (GUID) with the following code:
[System.Guid]::NewGuid()  But, let’s say, I have a function that has a GUID parameter.</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 3</title>
      <link>https://psmag.github.io/2014/06/26/pstip-using-xpath-in-powershell-part-3/</link>
      <pubDate>Thu, 26 Jun 2014 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/26/pstip-using-xpath-in-powershell-part-3/</guid>
      <description>Filtering data with XPath works very well even if we need more complex filters that require information from different levels in the XML document.</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 2</title>
      <link>https://psmag.github.io/2014/06/25/pstip-using-xpath-in-powershell-part-2/</link>
      <pubDate>Wed, 25 Jun 2014 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/25/pstip-using-xpath-in-powershell-part-2/</guid>
      <description>XPath can be used to apply ‘filter left’ philosophy to XML documents. For example we can find any h1 element with ‘title’ id using the following syntax:</description>
    </item>
    
    <item>
      <title>#PSTip Using XPath in PowerShell, Part 1</title>
      <link>https://psmag.github.io/2014/06/24/pstip-using-xpath-in-powershell-part-1/</link>
      <pubDate>Tue, 24 Jun 2014 18:00:09 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/24/pstip-using-xpath-in-powershell-part-1/</guid>
      <description>This is the first tip in a series of Select-Xml/XPath tips.
Working with XML documents in PowerShell is relatively easy. For most things it is enough to read XML file and convert it to XmlDocument object using XML type accelerator:</description>
    </item>
    
    <item>
      <title>#PSTip Be cautious with profile customizations and PowerShell Workflow</title>
      <link>https://psmag.github.io/2014/06/20/pstip-be-cautious-with-profile-customizations-and-powershell-workflow/</link>
      <pubDate>Fri, 20 Jun 2014 18:00:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/06/20/pstip-be-cautious-with-profile-customizations-and-powershell-workflow/</guid>
      <description>When working with Windows PowerShell Workflow, there are things to be aware of which can break workflow from working. One such thing is customizations made in the PowerShell profile.</description>
    </item>
    
    <item>
      <title>#PSTip Test if a URL is absolute or not</title>
      <link>https://psmag.github.io/2014/05/29/pstip-test-if-a-url-is-absolute-or-not/</link>
      <pubDate>Thu, 29 May 2014 16:17:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/05/29/pstip-test-if-a-url-is-absolute-or-not/</guid>
      <description>The System.Uri class in .NET provides a way to validate if a URL is an absolute URL or not. This can be quite handy when your script deals with downloading content from web pages and there is a need to validate the specified URL.</description>
    </item>
    
    <item>
      <title>#PSTip Filtering a collection using comparison operators</title>
      <link>https://psmag.github.io/2014/05/28/pstip-filtering-a-collection-using-comparison-operators/</link>
      <pubDate>Wed, 28 May 2014 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/05/28/pstip-filtering-a-collection-using-comparison-operators/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Starting with PowerShell 3.0, it is possible to filter a collection for matching or non-matching values using comparison operators.</description>
    </item>
    
    <item>
      <title>#PSTip Mapping the CIM ValueMap and Values qualifiers</title>
      <link>https://psmag.github.io/2014/04/23/pstip-mapping-the-cim-valuemap-and-value-qualifiers/</link>
      <pubDate>Wed, 23 Apr 2014 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/23/pstip-mapping-the-cim-valuemap-and-value-qualifiers/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
At PowerShell training I did earlier this week, an attendee asked me if there is a way to map a CIM class property’s ValueMap to the Values.</description>
    </item>
    
    <item>
      <title>#PStip Enabling RSS inside Hyper-V guest OS</title>
      <link>https://psmag.github.io/2014/04/17/pstip-enabling-rss-inside-hyper-v-guest-os/</link>
      <pubDate>Thu, 17 Apr 2014 18:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/17/pstip-enabling-rss-inside-hyper-v-guest-os/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
While reviewing results returned by the Best Practices Analyzer on a virtual machine, a warning about RSS (Receive Side Scaling) was raised.</description>
    </item>
    
    <item>
      <title>#PSTip Pause after UEFI boot failure when using Hyper-V Generation 2 virtual machines</title>
      <link>https://psmag.github.io/2014/04/16/pstip-pause-after-uefi-boot-failure-when-using-hyper-v-generation-2-virtual-machines/</link>
      <pubDate>Wed, 16 Apr 2014 18:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/16/pstip-pause-after-uefi-boot-failure-when-using-hyper-v-generation-2-virtual-machines/</guid>
      <description>Hyper-V in Windows 8.1 and Windows Server 2012 R2 introduced Generation 2 virtual machines, which provides new feature and better performance.</description>
    </item>
    
    <item>
      <title>#PSTip How to identify “memory limited” servers using PowerShell</title>
      <link>https://psmag.github.io/2014/04/15/pstip-how-to-identify-memory-limited-servers-using-powershell/</link>
      <pubDate>Tue, 15 Apr 2014 18:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/15/pstip-how-to-identify-memory-limited-servers-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Yesterday, I got a call from one of our BI managers. Listen, he says, I suspect that one of my BI servers is working too hard.</description>
    </item>
    
    <item>
      <title>#PSTip Listing all blobs in a public Azure storage container</title>
      <link>https://psmag.github.io/2014/04/10/pstip-listing-all-blobs-in-a-public-azure-storage-container/</link>
      <pubDate>Thu, 10 Apr 2014 18:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/10/pstip-listing-all-blobs-in-a-public-azure-storage-container/</guid>
      <description>In the earlier article, I showed you how to deploy a Azure VM from VM depot. The VM depot has a public storage container where all the VHDs are stored as blobs.</description>
    </item>
    
    <item>
      <title>#PSTip Replacing invalid XML characters</title>
      <link>https://psmag.github.io/2014/04/09/pstip-replacing-invalid-xml-characters/</link>
      <pubDate>Wed, 09 Apr 2014 18:00:25 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/04/09/pstip-replacing-invalid-xml-characters/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When authoring XML documents, some of the data you will use in your tags are considered invalid.</description>
    </item>
    
    <item>
      <title>#PSTip Explore TechEd NA 2014 sessions with PowerShell</title>
      <link>https://psmag.github.io/2014/03/26/pstip-explore-teched-na-2014-sessions-with-powershell/</link>
      <pubDate>Wed, 26 Mar 2014 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/26/pstip-explore-teched-na-2014-sessions-with-powershell/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
TechEd North America 2014 has a nice Content Catalog page. It provides a few useful search criteria to filter the content and find the sessions you are mostly interested in.</description>
    </item>
    
    <item>
      <title>#PSTip Create your own DSC resource snippets in PowerShell ISE</title>
      <link>https://psmag.github.io/2014/03/25/pstip-create-your-own-dsc-resource-snippets-in-powershell-ise/</link>
      <pubDate>Tue, 25 Mar 2014 20:04:04 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/25/pstip-create-your-own-dsc-resource-snippets-in-powershell-ise/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
PowerShell ISE 4.0 comes with just two DSC-related snippets (DSC Configuration (simple) and DSC Resource Provider (simple)).</description>
    </item>
    
    <item>
      <title>#PSTip How to remove the “Folders” group from my computer in Windows 8</title>
      <link>https://psmag.github.io/2014/03/24/pstip-how-to-remove-the-folders-group-from-my-computer-in-windows-8/</link>
      <pubDate>Mon, 24 Mar 2014 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/24/pstip-how-to-remove-the-folders-group-from-my-computer-in-windows-8/</guid>
      <description>When you double click the “This PC” desktop icon in Windows 8 you get the familiar “My Computer” window which includes several groups such as Devices and drives,_ Folders_, _Network locations_ (in case you have mapped drives), etc.</description>
    </item>
    
    <item>
      <title>#PSTip Get requests that are currently executing in a worker process</title>
      <link>https://psmag.github.io/2014/03/18/pstip-get-requests-that-are-currently-executing-in-a-worker-process/</link>
      <pubDate>Tue, 18 Mar 2014 18:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/18/pstip-get-requests-that-are-currently-executing-in-a-worker-process/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
IIS lets you view all worker processes of a server when you double click the Worker Process tile in IIS manager (inetmgr.</description>
    </item>
    
    <item>
      <title>#PSTip Reading file content as a byte array</title>
      <link>https://psmag.github.io/2014/03/17/pstip-reading-file-content-as-a-byte-array/</link>
      <pubDate>Mon, 17 Mar 2014 18:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/17/pstip-reading-file-content-as-a-byte-array/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
A few days ago I had to write a script to upload files to a remote FTP server.</description>
    </item>
    
    <item>
      <title>#PSTip Get currently available MAC address from Hyper-V MAC address pool</title>
      <link>https://psmag.github.io/2014/03/12/pstip-get-currently-available-mac-address-from-hyper-v-mac-address-pool/</link>
      <pubDate>Wed, 12 Mar 2014 18:00:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/12/pstip-get-currently-available-mac-address-from-hyper-v-mac-address-pool/</guid>
      <description>I have written scripts to automate VM deployments across a farm of Hyper-V servers and I prefer using static MAC addresses for all my workload virtual machines.</description>
    </item>
    
    <item>
      <title>#PSTip Identifying read-only domain controllers</title>
      <link>https://psmag.github.io/2014/03/11/pstip-identifying-read-only-domain-controllers/</link>
      <pubDate>Tue, 11 Mar 2014 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/11/pstip-identifying-read-only-domain-controllers/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When you get a list of domain controllers using the AD module, one of the propertieseach DC has is the IsReadOnly property.</description>
    </item>
    
    <item>
      <title>#PSTip Setting VM Bandwidth Management QoS in Hyper-V using PowerShell</title>
      <link>https://psmag.github.io/2014/03/10/pstip-setting-vm-bandwidth-management-qos-in-hyper-v-using-powershell/</link>
      <pubDate>Mon, 10 Mar 2014 18:00:10 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/10/pstip-setting-vm-bandwidth-management-qos-in-hyper-v-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The bandwidth utilized by a VM (QoS = Quality of Service ) can be controlled via special parameters of the virtual network card for a given VM.</description>
    </item>
    
    <item>
      <title>#PSTip How to disable DNS registration with PowerShell</title>
      <link>https://psmag.github.io/2014/03/07/pstip-how-to-disable-dns-registration-with-powershell/</link>
      <pubDate>Fri, 07 Mar 2014 19:00:58 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/07/pstip-how-to-disable-dns-registration-with-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Today, a colleague in the network team asked if we could disable the default DNS registration flag (shown below) because our computers are not allowed to update DNS servers directly.</description>
    </item>
    
    <item>
      <title>#PSTip GitHub PowerShell syntax highlighting in Markdown</title>
      <link>https://psmag.github.io/2014/03/06/pstip-github-powershell-syntax-highlighting-in-markdown/</link>
      <pubDate>Thu, 06 Mar 2014 19:00:42 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/06/pstip-github-powershell-syntax-highlighting-in-markdown/</guid>
      <description>GitHub, a service for hosting development projects that can be written in many programing and scripting languages has its own extensions to the popular Markdown style.</description>
    </item>
    
    <item>
      <title>#PSTip Installing and setting up AWS PowerShell Tools</title>
      <link>https://psmag.github.io/2014/03/05/pstip-installing-and-setting-up-aws-powershell-tools/</link>
      <pubDate>Wed, 05 Mar 2014 19:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/05/pstip-installing-and-setting-up-aws-powershell-tools/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
I have been working with Amazon Web Services (AWS) and for me the default management tool is their PowerShell module.</description>
    </item>
    
    <item>
      <title>#PSTip Restarting PowerShell as an administrator</title>
      <link>https://psmag.github.io/2014/03/04/pstip-restarting-powershell-as-an-administrator/</link>
      <pubDate>Tue, 04 Mar 2014 19:00:43 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/04/pstip-restarting-powershell-as-an-administrator/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
I bet this sounds familiar to you. You start working in the PowerShell console or in the ISE, and then at one point you figure out that a command you’re executing fails because your session is not elevated!</description>
    </item>
    
    <item>
      <title>#PSTip Setting Hyper-V client settings</title>
      <link>https://psmag.github.io/2014/03/03/pstip-setting-hyper-v-client-settings/</link>
      <pubDate>Mon, 03 Mar 2014 19:00:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/03/03/pstip-setting-hyper-v-client-settings/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When working with Hyper-V in Windows Server 2012 or Windows 8 and higher, you can set various Hyper-V host settings via the Hyper-V Settings dialog.</description>
    </item>
    
    <item>
      <title>#PSTip How to identify Hyper-V virtual machines</title>
      <link>https://psmag.github.io/2014/02/28/pstip-how-to-identify-hyper-v-virtual-machines/</link>
      <pubDate>Fri, 28 Feb 2014 19:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/28/pstip-how-to-identify-hyper-v-virtual-machines/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
There are several ways to test if a computer object is a virtual machine.</description>
    </item>
    
    <item>
      <title>#PSTip Hyper-V VM Connection Authorization</title>
      <link>https://psmag.github.io/2014/02/27/pstip-hyper-v-vm-connection-authorization/</link>
      <pubDate>Thu, 27 Feb 2014 19:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/27/pstip-hyper-v-vm-connection-authorization/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Virtual Machine Connection Authorization allows users to connect to virtual machines using the VMConnect interface in Hyper-V (and Hyper-V RSAT tools).</description>
    </item>
    
    <item>
      <title>#PSTip Monitoring Cluster Shared Volume (CSV) availability</title>
      <link>https://psmag.github.io/2014/02/26/pstip-monitoring-cluster-shared-volume-csv-availability/</link>
      <pubDate>Wed, 26 Feb 2014 19:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/26/pstip-monitoring-cluster-shared-volume-csv-availability/</guid>
      <description>Recently, I was troubleshooting an issue related to CSVs going offline randomly. In that process, I had to detect when a CSV goes offline and then analyse a few log files to find the root cause.</description>
    </item>
    
    <item>
      <title>#PSTip Editing your hosts file</title>
      <link>https://psmag.github.io/2014/02/25/pstip-editing-your-hosts-file/</link>
      <pubDate>Tue, 25 Feb 2014 19:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/25/pstip-editing-your-hosts-file/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Occasionally you need to make changes to the hosts file, either locally or remotely on another machine.</description>
    </item>
    
    <item>
      <title>#PSTip Controlling traffic of a VM network adapter in Hyper-V</title>
      <link>https://psmag.github.io/2014/02/24/pstip-controlling-traffic-of-a-vm-network-adapter-in-hyper-v/</link>
      <pubDate>Mon, 24 Feb 2014 19:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/24/pstip-controlling-traffic-of-a-vm-network-adapter-in-hyper-v/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Using the Add-VMNetworkAdapterAcl cmdlet we can create ACLs (firewall-like rule) that applies to the traffic through a virtual machine network adapter.</description>
    </item>
    
    <item>
      <title>#PSTip How to prevent a VM from becoming a Router</title>
      <link>https://psmag.github.io/2014/02/22/pstip-how-to-prevent-a-vm-from-becoming-a-router/</link>
      <pubDate>Sat, 22 Feb 2014 19:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/22/pstip-how-to-prevent-a-vm-from-becoming-a-router/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Similarly to the Hyper-V security feature discussed here, Hyper-V can also protect the environment from VMs pretending to act as Routers.</description>
    </item>
    
    <item>
      <title>#PSTip How to prevent rogue DHCP servers in Hyper-V</title>
      <link>https://psmag.github.io/2014/02/21/pstip-how-to-prevent-rouge-dhcp-servers-in-hyper-v/</link>
      <pubDate>Fri, 21 Feb 2014 19:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/21/pstip-how-to-prevent-rouge-dhcp-servers-in-hyper-v/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In a DHCP environment, it is possible for a rogue DHCP server to respond to client DHCP requests and provide incorrect address and configuration information.</description>
    </item>
    
    <item>
      <title>#PSTip How to get the number of IIS current client connections</title>
      <link>https://psmag.github.io/2014/02/20/pstip-how-to-get-the-number-of-iis-current-client-connections/</link>
      <pubDate>Thu, 20 Feb 2014 19:00:27 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/20/pstip-how-to-get-the-number-of-iis-current-client-connections/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Using the Get-Counter cmdlet and the Web Service Current Connections performance counter, you can get the amount of current connections to an IIS server or to one of its web sites.</description>
    </item>
    
    <item>
      <title>#PSTip How to enable Web Deploy automatic backups using PowerShell</title>
      <link>https://psmag.github.io/2014/02/19/pstip-how-to-enable-web-deploy-automatic-backups-using-powershell/</link>
      <pubDate>Wed, 19 Feb 2014 19:00:31 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/19/pstip-how-to-enable-web-deploy-automatic-backups-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Web Deploy v3 introduced an automatic server-side backup feature for IIS 7 and above.</description>
    </item>
    
    <item>
      <title>#PSTip Comparing DateTime with a given precision</title>
      <link>https://psmag.github.io/2014/02/18/pstip-comparing-datetime-with-a-given-precision/</link>
      <pubDate>Tue, 18 Feb 2014 19:00:46 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/18/pstip-comparing-datetime-with-a-given-precision/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Comparing two System.DateTime objects in PowerShell is really easy. All you need to do is:</description>
    </item>
    
    <item>
      <title>#PSTip VM Port mirroring in Hyper-V</title>
      <link>https://psmag.github.io/2014/02/17/pstip-vm-port-mirroring-in-hyper-v/</link>
      <pubDate>Mon, 17 Feb 2014 19:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/17/pstip-vm-port-mirroring-in-hyper-v/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In a physical switch environment, all traffic from selected ports can be duplicated and copied to a mirror port for capture and analysis, such as network diagnostic of a VM boot process or any network-related issues.</description>
    </item>
    
    <item>
      <title>#PSTip Test if a download can be suspended and resumed</title>
      <link>https://psmag.github.io/2014/02/07/pstip-test-if-a-download-can-be-suspended-and-resumed/</link>
      <pubDate>Fri, 07 Feb 2014 19:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/07/pstip-test-if-a-download-can-be-suspended-and-resumed/</guid>
      <description>Today, most of the web servers that provide downloads enable resumable downloads. Of course, there are still sites that don’t offer resumable downloads.</description>
    </item>
    
    <item>
      <title>#PSTip Setting keyboard layout in Windows 8 and Server 2012</title>
      <link>https://psmag.github.io/2014/02/06/pstip-setting-keyboard-layout-in-windows-8-and-server-2012/</link>
      <pubDate>Thu, 06 Feb 2014 19:00:23 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/02/06/pstip-setting-keyboard-layout-in-windows-8-and-server-2012/</guid>
      <description>Have you ever wondered how you can set the keyboard layout using PowerShell? I recently came across a situation where a set of virtual machines I deployed from a template had a different keyboard layout than what I intend to use.</description>
    </item>
    
    <item>
      <title>#PSTip Using Start-BitsTransfer and waiting for download to complete</title>
      <link>https://psmag.github.io/2014/01/17/pstip-using-start-bitstransfer-and-waiting-for-download-to-complete/</link>
      <pubDate>Fri, 17 Jan 2014 19:00:09 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/01/17/pstip-using-start-bitstransfer-and-waiting-for-download-to-complete/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
There was a quick status this morning on Facebook where my friend Deepak Dhami a.</description>
    </item>
    
    <item>
      <title>#PSTip Validating version numbers without RegEx</title>
      <link>https://psmag.github.io/2014/01/03/pstip-validating-version-numbers-without-regex/</link>
      <pubDate>Fri, 03 Jan 2014 19:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2014/01/03/pstip-validating-version-numbers-without-regex/</guid>
      <description>If you have read my earlier post on the Hyper-V Copy-VMFile cmdlet, I was checking for the version of integration components (IC) installed in the virtual machines.</description>
    </item>
    
    <item>
      <title>#PSTip Extending Type Data</title>
      <link>https://psmag.github.io/2013/12/26/pstip-extending-type-data/</link>
      <pubDate>Thu, 26 Dec 2013 19:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/12/26/pstip-extending-type-data/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In the previous article Matt used lambda functions to simplify data manipulation .</description>
    </item>
    
    <item>
      <title>#PSTip Overriding the ToString() Method, part II</title>
      <link>https://psmag.github.io/2013/12/19/pstip-overriding-the-tostring-method-part-ii/</link>
      <pubDate>Thu, 19 Dec 2013 19:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/12/19/pstip-overriding-the-tostring-method-part-ii/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In this neat tip Jakub showed a way to control the output of the ToString method by exposing a ToString function.</description>
    </item>
    
    <item>
      <title>#PSTip Overriding the ToString() Method</title>
      <link>https://psmag.github.io/2013/12/18/pstip-overriding-the-tostring-method/</link>
      <pubDate>Wed, 18 Dec 2013 19:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/12/18/pstip-overriding-the-tostring-method/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In this very helpful tip, Bartek shown us how to create a custom object using the New-Module cmdlet and how to constrain the data the object can hold.</description>
    </item>
    
    <item>
      <title>#PSTip Copying folders using Copy-VMFile cmdlet in Windows Server 2012 R2 (Hyper-V)</title>
      <link>https://psmag.github.io/2013/12/17/pstip-copying-folders-using-copy-vmfile-cmdlet-in-windows-server-2012-r2-hyper-v/</link>
      <pubDate>Tue, 17 Dec 2013 19:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/12/17/pstip-copying-folders-using-copy-vmfile-cmdlet-in-windows-server-2012-r2-hyper-v/</guid>
      <description>In an earlier article, I showed you how to use the Copy-VMFile cmdlet. However, if you have paid attention and really used it, you will know that it cannot be used to copy a folder completely with its contents in a recursive manner.</description>
    </item>
    
    <item>
      <title>#PSTip Converting .NET types to CIM types and vice versa</title>
      <link>https://psmag.github.io/2013/12/06/pstip-converting-net-types-to-cim-types-and-vice-versa/</link>
      <pubDate>Fri, 06 Dec 2013 19:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/12/06/pstip-converting-net-types-to-cim-types-and-vice-versa/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
If you get a list of CIM class properties you’ll notice the CimType property.</description>
    </item>
    
    <item>
      <title>#PSTip Check if a folder is shared</title>
      <link>https://psmag.github.io/2013/11/27/pstip-check-if-a-folder-is-shared/</link>
      <pubDate>Wed, 27 Nov 2013 19:00:45 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/11/27/pstip-check-if-a-folder-is-shared/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The WMI class Win32_Share gives us the information about all network shares that exist on the local machine.</description>
    </item>
    
    <item>
      <title>#PSTip Convert a path to WMI compatible path</title>
      <link>https://psmag.github.io/2013/11/26/pstip-convert-a-path-to-wmi-compatible-path/</link>
      <pubDate>Tue, 26 Nov 2013 19:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/11/26/pstip-convert-a-path-to-wmi-compatible-path/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Some of the WMI queries require that we specify the folder path with an escaped path separator.</description>
    </item>
    
    <item>
      <title>#PSTip Clear clipboard content</title>
      <link>https://psmag.github.io/2013/11/13/pstip-clear-clipboard-content/</link>
      <pubDate>Wed, 13 Nov 2013 19:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/11/13/pstip-clear-clipboard-content/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Have you ever wondered how to clear the contents of the clipboard? There are certainly many ways to do that in PowerShell.</description>
    </item>
    
    <item>
      <title>#PSTip Ejecting and closing CDROM drive–the PowerShell way!</title>
      <link>https://psmag.github.io/2013/11/12/pstip-ejecting-and-closing-cdrom-drive-the-powershell-way/</link>
      <pubDate>Tue, 12 Nov 2013 19:00:38 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/11/12/pstip-ejecting-and-closing-cdrom-drive-the-powershell-way/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
I came across a project on Github (nothing related to PowerShell though) that provides a web-based UI for running system commands.</description>
    </item>
    
    <item>
      <title>#PSTip How to combine trace log entries from all SharePoint farm servers using PowerShell</title>
      <link>https://psmag.github.io/2013/11/05/pstip-how-to-combine-trace-log-entries-from-all-sharepoint-farm-servers-using-powershell/</link>
      <pubDate>Tue, 05 Nov 2013 19:00:47 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/11/05/pstip-how-to-combine-trace-log-entries-from-all-sharepoint-farm-servers-using-powershell/</guid>
      <description>Note: This tip requires SharePoint 2010 or above.
Whenever there’s a problem in SharePoint 2010 you are most likely using the ULS Viewer application to collect trace logs for further details about the problem in question or to monitor machines and the events they create in real-time.</description>
    </item>
    
    <item>
      <title>#PSTip Get the size of a file on disk</title>
      <link>https://psmag.github.io/2013/10/31/pstip-get-the-size-of-a-file-on-disk/</link>
      <pubDate>Thu, 31 Oct 2013 18:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/31/pstip-get-the-size-of-a-file-on-disk/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier post, I wrote about compressing / uncompressing files using WMI.</description>
    </item>
    
    <item>
      <title>#PSTip Working with Special Folders</title>
      <link>https://psmag.github.io/2013/10/30/pstip-working-with-special-folders/</link>
      <pubDate>Wed, 30 Oct 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/30/pstip-working-with-special-folders/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Windows provides access to many folders of the current user via the SpecialFolders collection.</description>
    </item>
    
    <item>
      <title>#PSTip Compress and uncompress files and folders using WMI</title>
      <link>https://psmag.github.io/2013/10/28/pstip-compress-and-uncompress-files-and-folders-using-wmi/</link>
      <pubDate>Mon, 28 Oct 2013 18:00:55 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/28/pstip-compress-and-uncompress-files-and-folders-using-wmi/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In WMI, the CIM_DataFile and CIM_Directory classes have some very useful methods we can use.</description>
    </item>
    
    <item>
      <title>#PSTip Azure cmdlets and proxy authentication</title>
      <link>https://psmag.github.io/2013/10/22/pstip-azure-cmdlets-and-proxy-authentication/</link>
      <pubDate>Tue, 22 Oct 2013 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/22/pstip-azure-cmdlets-and-proxy-authentication/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
A few days ago, I was working on setting up Kemp Azure VLM.</description>
    </item>
    
    <item>
      <title>#PSTip Windows 8.1 Win&#43;X Menu: PowerShell in, Command Prompt out!</title>
      <link>https://psmag.github.io/2013/10/21/pstip-windows-8-1-winx-menu-powershell-in-command-prompt-out/</link>
      <pubDate>Mon, 21 Oct 2013 18:00:06 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/21/pstip-windows-8-1-winx-menu-powershell-in-command-prompt-out/</guid>
      <description>Note: This tip requires Windows 8.1 or above.
The Power user menu (Win+X keyboard shortcut) introduced in Windows 8 provides quick access to various admin tools.</description>
    </item>
    
    <item>
      <title>#PSTip List all WMI namespaces on a system</title>
      <link>https://psmag.github.io/2013/10/18/pstip-list-all-wmi-namespaces-on-a-system/</link>
      <pubDate>Fri, 18 Oct 2013 18:00:19 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/18/pstip-list-all-wmi-namespaces-on-a-system/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In WMI, a namespace is a collection of classes. There are many WMI namespaces on a system and each namespace might contain more namespaces.</description>
    </item>
    
    <item>
      <title>#PSTip Exploring DSC resources</title>
      <link>https://psmag.github.io/2013/10/09/pstip-exploring-dsc-resources/</link>
      <pubDate>Wed, 09 Oct 2013 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/09/pstip-exploring-dsc-resources/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
In Windows Server 2012 R2 RTM build, Microsoft added a cmdlet called Get-DSCResource.</description>
    </item>
    
    <item>
      <title>#PSTip Parsing Exchange size strings</title>
      <link>https://psmag.github.io/2013/10/08/pstip-parsing-exchange-size-strings/</link>
      <pubDate>Tue, 08 Oct 2013 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/10/08/pstip-parsing-exchange-size-strings/</guid>
      <description>You have been tasked to generate a report of mailbox sizes and you quickly write the following:
Get-MailboxDatabase | Get-MailboxStatistics | Select-Object DisplayName,TotalItemSize | Export-Csv .</description>
    </item>
    
    <item>
      <title>#PSTip Offer Delayed Restart with Abort Functionality</title>
      <link>https://psmag.github.io/2013/09/27/pstip-offer-delayed-restart-with-abort-functionality/</link>
      <pubDate>Fri, 27 Sep 2013 18:00:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/27/pstip-offer-delayed-restart-with-abort-functionality/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Restart-Computer, no surprise, does the job of restarting a computer but there are times when you want to add the functionality to abort a restart.</description>
    </item>
    
    <item>
      <title>#PSTip Preview the members of a dynamic distribution group</title>
      <link>https://psmag.github.io/2013/09/13/pstip-preview-the-members-of-a-dynamic-distribution-group/</link>
      <pubDate>Fri, 13 Sep 2013 18:00:13 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/13/pstip-preview-the-members-of-a-dynamic-distribution-group/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Getting the members of a dynamic distribution group in the Exchange Management Console (EMC) is not an issue; you open the group and click the Preview button.</description>
    </item>
    
    <item>
      <title>#PSTip How to create a dynamic distribution group</title>
      <link>https://psmag.github.io/2013/09/12/pstip-how-to-create-a-dynamic-distribution-group/</link>
      <pubDate>Thu, 12 Sep 2013 18:00:27 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/12/pstip-how-to-create-a-dynamic-distribution-group/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
One of the group types that Exchange can create is a dynamic distribution group.</description>
    </item>
    
    <item>
      <title>#PSTip How to prevent script execution for non-admin users</title>
      <link>https://psmag.github.io/2013/09/11/pstip-how-to-prevent-script-execution-for-non-admin-users/</link>
      <pubDate>Wed, 11 Sep 2013 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/11/pstip-how-to-prevent-script-execution-for-non-admin-users/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
The #Requires statement allows us to prevent a script from running without the required elements.</description>
    </item>
    
    <item>
      <title>#PSTip How to find which mailboxes are over quota limits</title>
      <link>https://psmag.github.io/2013/09/10/pstip-how-to-find-which-mailboxes-are-over-quota-limits/</link>
      <pubDate>Tue, 10 Sep 2013 18:00:28 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/10/pstip-how-to-find-which-mailboxes-are-over-quota-limits/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In a previous tip we saw how to configure storage quotas for a mailbox using PowerShell.</description>
    </item>
    
    <item>
      <title>#PSTip How to configure storage quotas for a mailbox using PowerShell</title>
      <link>https://psmag.github.io/2013/09/09/pstip-how-to-configure-storage-quotas-for-a-mailbox-using-powershell/</link>
      <pubDate>Mon, 09 Sep 2013 18:00:51 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/09/pstip-how-to-configure-storage-quotas-for-a-mailbox-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Exchange lets us configure mailbox storage quotas for a mailbox, control the size of mailboxes and manage the growth of mailbox databases.</description>
    </item>
    
    <item>
      <title>#PSTip Tabify your Script</title>
      <link>https://psmag.github.io/2013/09/03/pstip-tabify-your-script/</link>
      <pubDate>Tue, 03 Sep 2013 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/09/03/pstip-tabify-your-script/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
There are several things you can do to make more readable scripts. You can do good documentation and use variables that are meaningful.</description>
    </item>
    
    <item>
      <title>#PSTip Deleting extended properties on database objects using SMO</title>
      <link>https://psmag.github.io/2013/08/30/pstip-deleting-extended-properties/</link>
      <pubDate>Fri, 30 Aug 2013 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/30/pstip-deleting-extended-properties/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In earlier tips, we looked at how to add, read and update the extended properties of a SQL database.</description>
    </item>
    
    <item>
      <title>#PSTip Updating extended properties on database objects using SMO</title>
      <link>https://psmag.github.io/2013/08/29/pstip-updating-extended-properties-on-database-objects-using-smo/</link>
      <pubDate>Thu, 29 Aug 2013 18:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/29/pstip-updating-extended-properties-on-database-objects-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we saw how we can read extended properties to a database.</description>
    </item>
    
    <item>
      <title>#PSTip Reading extended properties on database objects using SMO</title>
      <link>https://psmag.github.io/2013/08/28/pstip-reading-extended-properties-on-database-objects-using-smo/</link>
      <pubDate>Wed, 28 Aug 2013 18:00:23 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/28/pstip-reading-extended-properties-on-database-objects-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Extended properties are an useful but, under utilized feature in SQL server. In an earlier tip, we saw that you can add extended properties to databases and other objects.</description>
    </item>
    
    <item>
      <title>#PSTip Creating extended properties on database objects using SMO</title>
      <link>https://psmag.github.io/2013/08/27/pstip-creating-extended-properties-on-database-objects-using-smo/</link>
      <pubDate>Tue, 27 Aug 2013 18:00:46 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/27/pstip-creating-extended-properties-on-database-objects-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
You might have seen several articles on the web discussing about the SQL database extended properties from a self-documentation point of view.</description>
    </item>
    
    <item>
      <title>#PSTip Dynamically hiding a function from the debugger in PowerShell ISE</title>
      <link>https://psmag.github.io/2013/08/23/pstip-dynamically-hiding-a-function-from-the-debugger-in-powershell-ise/</link>
      <pubDate>Fri, 23 Aug 2013 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/23/pstip-dynamically-hiding-a-function-from-the-debugger-in-powershell-ise/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
In this great post, Tobias walked you through the process of hiding functions from the debugger.</description>
    </item>
    
    <item>
      <title>#PSTip Tab Completion in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/08/22/pstip-tab-completion-in-powershell-3-0/</link>
      <pubDate>Thu, 22 Aug 2013 18:00:43 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/22/pstip-tab-completion-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
PowerShell’s tab completion just got better in v3. In addition to all its awesomeness, it is now capable of completing service or process names, event log names, module names and the list is long.</description>
    </item>
    
    <item>
      <title>#PSTip Validate is a database is available on a SQL instance</title>
      <link>https://psmag.github.io/2013/08/21/pstip-validate-is-a-database-is-available-on-a-sql-instance/</link>
      <pubDate>Wed, 21 Aug 2013 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/21/pstip-validate-is-a-database-is-available-on-a-sql-instance/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Sometimes we need to know if a particular DB is available on a given instance before going ahead and making any configuration changes.</description>
    </item>
    
    <item>
      <title>#PSTip Finding all roles a particular login is mapped to in all databases</title>
      <link>https://psmag.github.io/2013/08/20/pstip-finding-all-roles-a-particular-login-is-mapped-to-in-all-databases/</link>
      <pubDate>Tue, 20 Aug 2013 18:00:16 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/20/pstip-finding-all-roles-a-particular-login-is-mapped-to-in-all-databases/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In a previous tip, we checked out how to get the names of all databases to which a login is mapped and the username for that login in each database.</description>
    </item>
    
    <item>
      <title>#PSTip Finding all databases to which a login is mapped</title>
      <link>https://psmag.github.io/2013/08/19/pstip-finding-all-databases-to-which-a-login-is-mapped/</link>
      <pubDate>Mon, 19 Aug 2013 18:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/19/pstip-finding-all-databases-to-which-a-login-is-mapped/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
One of the projects on which I work requires a validation step after each deployment.</description>
    </item>
    
    <item>
      <title>#PSTip Get the fully qualified path of the system directory</title>
      <link>https://psmag.github.io/2013/08/16/pstip-get-the-fully-qualified-path-of-the-system-directory/</link>
      <pubDate>Fri, 16 Aug 2013 18:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/16/pstip-get-the-fully-qualified-path-of-the-system-directory/</guid>
      <description>There are many ways to get the path of the system directory (e.g system32). Here’ one that I find very useful that involves the .</description>
    </item>
    
    <item>
      <title>#PSTip Validate if a user exists in Active Directory</title>
      <link>https://psmag.github.io/2013/08/15/pstip-validate-if-a-user-exists-in-active-directory/</link>
      <pubDate>Thu, 15 Aug 2013 18:00:23 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/15/pstip-validate-if-a-user-exists-in-active-directory/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
[adsisearcher] is a PowerShell type adapter for DirectorySearcher .NET class. We can use this type adapter to perform queries against Active Directory Domain Services.</description>
    </item>
    
    <item>
      <title>#PSTip Validate if a SQL login exists using PowerShell</title>
      <link>https://psmag.github.io/2013/08/14/pstip-validate-if-a-sql-login-exists-using-powershell/</link>
      <pubDate>Wed, 14 Aug 2013 18:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/14/pstip-validate-if-a-sql-login-exists-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Before performing tasks like adding roles to a SQL login, it is desired to validate the existence of SQL login.</description>
    </item>
    
    <item>
      <title>#PSTip Add a SQL login to database roles using SMO</title>
      <link>https://psmag.github.io/2013/08/13/pstip-add-a-sql-login-to-database-roles-using-smo/</link>
      <pubDate>Tue, 13 Aug 2013 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/13/pstip-add-a-sql-login-to-database-roles-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
We can use SQL Server SMO object to add a SQL login to the database roles.</description>
    </item>
    
    <item>
      <title>#PSTip Identifying DSC commands</title>
      <link>https://psmag.github.io/2013/08/12/pstip-identifying-dsc-commands/</link>
      <pubDate>Mon, 12 Aug 2013 18:00:25 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/12/pstip-identifying-dsc-commands/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
Starting in Windows PowerShell 4.0 with the new Desired State Configuration (DSC) feature, we now have one more command type added to the list of command types: Configuration.</description>
    </item>
    
    <item>
      <title>#PSTip Initializing multiple variables at once</title>
      <link>https://psmag.github.io/2013/08/09/pstip-initializing-multiple-variables-at-once/</link>
      <pubDate>Fri, 09 Aug 2013 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/09/pstip-initializing-multiple-variables-at-once/</guid>
      <description>Here’s another cool variables tip. Say you want to initialize a few variables to a specific value. Instead of doing:</description>
    </item>
    
    <item>
      <title>#PSTip Multiple variable assignments</title>
      <link>https://psmag.github.io/2013/08/08/pstip-multiple-variable-assignments/</link>
      <pubDate>Thu, 08 Aug 2013 18:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/08/pstip-multiple-variable-assignments/</guid>
      <description>In the previous tip I showed how we can use multiple assignments to swap the value of two or more variable values.</description>
    </item>
    
    <item>
      <title>#PSTip Swapping the value of two variables</title>
      <link>https://psmag.github.io/2013/08/07/pstip-swapping-the-value-of-two-variables/</link>
      <pubDate>Wed, 07 Aug 2013 18:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/07/pstip-swapping-the-value-of-two-variables/</guid>
      <description>In most programming languages the conventional way to swap the value of two variable is to use a third variable.</description>
    </item>
    
    <item>
      <title>#PSTip Retrieve all SQL instance names on local and remote computers</title>
      <link>https://psmag.github.io/2013/08/06/pstip-retrieve-all-sql-instance-names-on-local-and-remote-computers/</link>
      <pubDate>Tue, 06 Aug 2013 18:00:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/06/pstip-retrieve-all-sql-instance-names-on-local-and-remote-computers/</guid>
      <description>I was looking at way to retrieve the SQL instance names on a remote computer without using SQL SMO. This is essential for me as I don’t always expect to have the SQL SMO DLLs on the computer where I run my scripts.</description>
    </item>
    
    <item>
      <title>#PSTip Reset your ISE runspace</title>
      <link>https://psmag.github.io/2013/08/05/pstip-reset-your-ise-runspace/</link>
      <pubDate>Mon, 05 Aug 2013 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/05/pstip-reset-your-ise-runspace/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
I have scripts that work with multiple versions of the same third-party .</description>
    </item>
    
    <item>
      <title>#PSTip Drop all Active Connections of SQL Database</title>
      <link>https://psmag.github.io/2013/08/02/pstip-drop-all-active-connections-of-sql-database/</link>
      <pubDate>Fri, 02 Aug 2013 18:00:04 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/02/pstip-drop-all-active-connections-of-sql-database/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we looked at how we can retrieve the active connection count for a SQL database.</description>
    </item>
    
    <item>
      <title>#PSTip Get Active Database Connections of a SQL Database</title>
      <link>https://psmag.github.io/2013/08/01/pstip-get-active-database-connections-of-a-sql-database/</link>
      <pubDate>Thu, 01 Aug 2013 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/08/01/pstip-get-active-database-connections-of-a-sql-database/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
As a part of SQL SMO automation, when we want to detach or delete databases, we might want to first drop all active database connections.</description>
    </item>
    
    <item>
      <title>#PSTip Hiding parameters from tab completion</title>
      <link>https://psmag.github.io/2013/07/29/pstip-hiding-parameters-from-tab-completion/</link>
      <pubDate>Mon, 29 Jul 2013 18:00:28 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/29/pstip-hiding-parameters-from-tab-completion/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
When writing functions and declaring parameters, PowerShell lets us use many parameter attributes to define the behaviour of the parameter.</description>
    </item>
    
    <item>
      <title>#PSTip How to convert words to Title Case</title>
      <link>https://psmag.github.io/2013/07/24/pstip-how-to-convert-words-to-title-case/</link>
      <pubDate>Wed, 24 Jul 2013 18:00:40 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/24/pstip-how-to-convert-words-to-title-case/</guid>
      <description>Let us say that you have a list of words or a sentence that you’d like to manipulate and make sure that every word starts with a capital letter.</description>
    </item>
    
    <item>
      <title>#PSTip How to switch off display with PowerShell</title>
      <link>https://psmag.github.io/2013/07/18/pstip-how-to-switch-off-display-with-powershell/</link>
      <pubDate>Thu, 18 Jul 2013 18:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/18/pstip-how-to-switch-off-display-with-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
This week on a PowerShell forum, I stumbled upon user request to turn off his PC’s display on demand.</description>
    </item>
    
    <item>
      <title>#PSTip Get the path to x86 special folders</title>
      <link>https://psmag.github.io/2013/07/17/pstip-get-the-path-to-x86-special-folders/</link>
      <pubDate>Wed, 17 Jul 2013 18:02:39 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/17/pstip-get-the-path-to-x86-special-folders/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Using the System.Environment+SpecialFolder enumeration we can retrieve a list of all paths to system special folders.</description>
    </item>
    
    <item>
      <title>#PSTip How to enable Event logs using Windows PowerShell</title>
      <link>https://psmag.github.io/2013/07/15/pstip-how-to-enable-event-logs-using-windows-powershell/</link>
      <pubDate>Mon, 15 Jul 2013 18:00:46 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/15/pstip-how-to-enable-event-logs-using-windows-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Since Windows Vista, the operating system is shipped with a ton of additional event logs and providers, some of them are present on the system but are not enabled.</description>
    </item>
    
    <item>
      <title>#PSTip How to add thousands separators to a number</title>
      <link>https://psmag.github.io/2013/07/12/pstip-how-to-add-thousands-separators-to-a-number/</link>
      <pubDate>Fri, 12 Jul 2013 18:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/12/pstip-how-to-add-thousands-separators-to-a-number/</guid>
      <description>Say you have a number like: 133903155, how quickly can you digest it? It’s much easier to read when it’s formatted as 133,903,155.</description>
    </item>
    
    <item>
      <title>#PSTip Using Tab completion against the command history</title>
      <link>https://psmag.github.io/2013/07/11/pstip-using-tab-completion-against-the-command-history/</link>
      <pubDate>Thu, 11 Jul 2013 18:00:39 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/11/pstip-using-tab-completion-against-the-command-history/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Each time you execute a command in Windows PowerShell, the command is remembered and can be fetched by using the Get-History cmdlet or by using the the up/down arrow keys.</description>
    </item>
    
    <item>
      <title>#PSTip A Faster way to open specific Event Logs</title>
      <link>https://psmag.github.io/2013/07/10/pstip-a-faster-way-to-open-specific-event-logs/</link>
      <pubDate>Wed, 10 Jul 2013 18:00:27 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/10/pstip-a-faster-way-to-open-specific-event-logs/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
One of the annoyances I’m facing when working with Event logs is navigating and finding a log that is buried a few levels down the logs tree.</description>
    </item>
    
    <item>
      <title>#PSTip How to check if a DateTime string is in a specific pattern</title>
      <link>https://psmag.github.io/2013/07/09/pstip-how-to-check-if-a-datetime-string-is-in-a-specific-pattern/</link>
      <pubDate>Tue, 09 Jul 2013 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/09/pstip-how-to-check-if-a-datetime-string-is-in-a-specific-pattern/</guid>
      <description>You want to be able to check and allow only date and time strings that are in a specific date time format pattern.</description>
    </item>
    
    <item>
      <title>#PSTip Converting a String to a System.DateTime object</title>
      <link>https://psmag.github.io/2013/07/08/pstip-converting-a-string-to-a-system-datetime-object/</link>
      <pubDate>Mon, 08 Jul 2013 18:00:24 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/08/pstip-converting-a-string-to-a-system-datetime-object/</guid>
      <description>In a perfect world all date and time data available are represented by System.DateTime objects. In the real world we are usually not that lucky.</description>
    </item>
    
    <item>
      <title>#PSTip PowerShell 4 – Filtering a collection by using a method syntax</title>
      <link>https://psmag.github.io/2013/07/05/pstip-powershell-4-filtering-a-collection-by-using-a-method-syntax/</link>
      <pubDate>Fri, 05 Jul 2013 18:00:38 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/05/pstip-powershell-4-filtering-a-collection-by-using-a-method-syntax/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
One of the new features introduced in PowerShell 4.0 is the collection filtering by using a method syntax.</description>
    </item>
    
    <item>
      <title>#PSTip Inserting characters at a specified string index position</title>
      <link>https://psmag.github.io/2013/07/04/pstip-inserting-characters-at-a-specified-string-index-position/</link>
      <pubDate>Thu, 04 Jul 2013 18:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/04/pstip-inserting-characters-at-a-specified-string-index-position/</guid>
      <description>How do you turn ‘20130701’ to ‘2013-07-01’?
There are many ways to tackle this, breaking it into pieces (substring) and joining it back with a dash, use some regex fu to manipulate it, parse it as a DateTime and format it and so on.</description>
    </item>
    
    <item>
      <title>#PSTip Invoking methods by using dynamic method names</title>
      <link>https://psmag.github.io/2013/07/03/pstip-invoking-methods-by-using-dynamic-method-names/</link>
      <pubDate>Wed, 03 Jul 2013 18:00:09 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/03/pstip-invoking-methods-by-using-dynamic-method-names/</guid>
      <description>Note: This tip requires PowerShell 4.0 or above.
PowerShell enables you to refer to a property of an object in a dynamic fashion:</description>
    </item>
    
    <item>
      <title>#PSTip Disabling multiple AD user accounts</title>
      <link>https://psmag.github.io/2013/07/02/pstip-disabling-multiple-ad-user-accounts/</link>
      <pubDate>Tue, 02 Jul 2013 18:00:05 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/02/pstip-disabling-multiple-ad-user-accounts/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
The Disable-ADAccount cmdlet disables an Active Directory user, computer, or service account. When you need to disable multiple accounts you might find yourself trying something obvious like:</description>
    </item>
    
    <item>
      <title>#PSTip Using the System.Windows.Forms.OpenFileDialog Class</title>
      <link>https://psmag.github.io/2013/07/01/pstip-using-the-system-windows-forms-openfiledialog-class/</link>
      <pubDate>Mon, 01 Jul 2013 18:00:31 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/07/01/pstip-using-the-system-windows-forms-openfiledialog-class/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In PowerShell, it is possible to use GUI elements to request user input.</description>
    </item>
    
    <item>
      <title>#PSTip: Using the System.Windows.Forms.FolderBrowserDialog Class</title>
      <link>https://psmag.github.io/2013/06/28/pstip-using-the-system-windows-forms-folderbrowserdialog-class/</link>
      <pubDate>Fri, 28 Jun 2013 20:00:58 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/28/pstip-using-the-system-windows-forms-folderbrowserdialog-class/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In PowerShell, it is possible to use GUI elements to allow for user input during scripts.</description>
    </item>
    
    <item>
      <title>#PSTip Get a list of all Com objects available</title>
      <link>https://psmag.github.io/2013/06/27/pstip-get-a-list-of-all-com-objects-available/</link>
      <pubDate>Thu, 27 Jun 2013 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/27/pstip-get-a-list-of-all-com-objects-available/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Recently a question was posted on the PowerShell.com forums: How to get a full list of available ComObjects?</description>
    </item>
    
    <item>
      <title># PSTip Query MSDN from PowerShell</title>
      <link>https://psmag.github.io/2013/06/26/pstip-query-msdn-from-powershell/</link>
      <pubDate>Wed, 26 Jun 2013 18:00:40 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/26/pstip-query-msdn-from-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
To get more information about any object, class or attribute the MSDN library is often a good resource.</description>
    </item>
    
    <item>
      <title>#PSTip How to start an elevated PowerShell from Windows Explorer</title>
      <link>https://psmag.github.io/2013/06/25/pstip-how-to-start-an-elevated-powershell-from-windows-explorer/</link>
      <pubDate>Tue, 25 Jun 2013 18:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/25/pstip-how-to-start-an-elevated-powershell-from-windows-explorer/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
The next time you are working in a folder and need to open a Windows PowerShell console directly to that location, it would be nice to have ‘Open Windows PowerShell Here as Administrator’ option on a context menu.</description>
    </item>
    
    <item>
      <title>#PSTip Change database recovery model using SMO</title>
      <link>https://psmag.github.io/2013/06/24/pstip-change-database-recovery-model-using-smo/</link>
      <pubDate>Mon, 24 Jun 2013 18:00:42 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/24/pstip-change-database-recovery-model-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Database mirroring requires that the database be in Full recovery model as a prerequisite to configure mirroring.</description>
    </item>
    
    <item>
      <title>#PSTip Deleting expired certificates from the personal certificate store</title>
      <link>https://psmag.github.io/2013/06/19/pstip-deleting-expired-certificates-from-the-personal-certificate-store/</link>
      <pubDate>Wed, 19 Jun 2013 18:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/19/pstip-deleting-expired-certificates-from-the-personal-certificate-store/</guid>
      <description>We use a lot of certificates for website authentication, and they expire each year. Some people end up with a collection of expired certificates.</description>
    </item>
    
    <item>
      <title>#PSTip Use Excel to View HTML Output</title>
      <link>https://psmag.github.io/2013/06/17/pstip-use-excel-to-view-html-output/</link>
      <pubDate>Mon, 17 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/17/pstip-use-excel-to-view-html-output/</guid>
      <description>Excel can be used to view HTML. If you add some CSS styles to the result of ConvertTo-HTML you can add much more rich output to Excel then you would get with a simple Export-Csv</description>
    </item>
    
    <item>
      <title>#PSTip Deleting a SQL mirroring endpoint with SMO and PowerShell</title>
      <link>https://psmag.github.io/2013/06/11/pstip-deleting-a-sql-mirroring-endpoint-in-smo-and-powershell/</link>
      <pubDate>Tue, 11 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/11/pstip-deleting-a-sql-mirroring-endpoint-in-smo-and-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In earlier tips, we looked at how we can get all SQL endpoints, check if a SQL endpoint exists or not, and creating SQL mirroring endpoints.</description>
    </item>
    
    <item>
      <title>#PSTip Creating a SQL TCP mirroring endpoint with SMO and PowerShell</title>
      <link>https://psmag.github.io/2013/06/10/pstip-creating-a-sql-tcp-mirroring-endpoint-in-smo-and-powershell/</link>
      <pubDate>Mon, 10 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/10/pstip-creating-a-sql-tcp-mirroring-endpoint-in-smo-and-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In today’s tip, we will see how we can use PowerShell and SMO to create a SQL TCP mirroring endpoint.</description>
    </item>
    
    <item>
      <title>#PSTip Refresh the PSModulePath environment variable without re-opening console</title>
      <link>https://psmag.github.io/2013/06/06/pstip-refresh-the-psmodulepath-environment-variable-without-re-opening-console/</link>
      <pubDate>Thu, 06 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/06/pstip-refresh-the-psmodulepath-environment-variable-without-re-opening-console/</guid>
      <description>A co-worker had asked me a question about why the SQLPS module was not available for importing immediately after an automated install of SQL using a PowerShell script.</description>
    </item>
    
    <item>
      <title>#PSTip Provide CapsLock status in Read-Host prompt</title>
      <link>https://psmag.github.io/2013/06/05/pstip-provide-capslock-status-in-read-host-prompt/</link>
      <pubDate>Wed, 05 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/05/pstip-provide-capslock-status-in-read-host-prompt/</guid>
      <description>In Windows, you get a message about the CapsLock status when logging on to Windows OS and with CapsLock on. You see this kind of experience in many other applications including web applications.</description>
    </item>
    
    <item>
      <title>#PSTip Check if a SQL endpoint exists or not</title>
      <link>https://psmag.github.io/2013/06/04/pstip-check-if-a-sql-endpoint-exists-or-not/</link>
      <pubDate>Tue, 04 Jun 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/04/pstip-check-if-a-sql-endpoint-exists-or-not/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Before we make an attempt at creating a new database mirroring endpoint, we need to verify if an endpoint with the given name and/or port already exists.</description>
    </item>
    
    <item>
      <title>#PSTip List all endpoints in a SQL deployment</title>
      <link>https://psmag.github.io/2013/06/03/pstip-list-all-endpoints-in-a-sql-deployment/</link>
      <pubDate>Mon, 03 Jun 2013 18:22:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/06/03/pstip-list-all-endpoints-in-a-sql-deployment/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When working with SQL Server database mirroring, it is desired to understand how to create and troubleshoot database endpoints.</description>
    </item>
    
    <item>
      <title>#PSTip Retrieving SQL database last backup dates using SMO</title>
      <link>https://psmag.github.io/2013/05/31/pstip-retrieving-sql-database-last-backup-dates-using-smo/</link>
      <pubDate>Fri, 31 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/31/pstip-retrieving-sql-database-last-backup-dates-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
For regular reporting and auditing purposes, it is always desired to capture the SQL last backup dates.</description>
    </item>
    
    <item>
      <title>#PSTip Getting SharePoint 2010 Health Analyzer alerts report by email</title>
      <link>https://psmag.github.io/2013/05/30/pstip-getting-sharepoint-2010-health-analyzer-alerts-report-by-email/</link>
      <pubDate>Thu, 30 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/30/pstip-getting-sharepoint-2010-health-analyzer-alerts-report-by-email/</guid>
      <description>SharePoint 2010 administrators are probably familiar with the following screenshot–you open the Central Administration page and you’re presented with a red Health Analyzer alert.</description>
    </item>
    
    <item>
      <title>#PSTip Find all groups with same group members in Active Directory</title>
      <link>https://psmag.github.io/2013/05/24/pstip-find-all-groups-with-same-group-members-in-active-directory/</link>
      <pubDate>Fri, 24 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/24/pstip-find-all-groups-with-same-group-members-in-active-directory/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Today I was asked if there was a way to find out which groups have the same group members.</description>
    </item>
    
    <item>
      <title>#PSTip Retrieve group membership of an Active Directory group recursively</title>
      <link>https://psmag.github.io/2013/05/23/pstip-retrieve-group-membership-of-an-active-directory-group-recursively/</link>
      <pubDate>Thu, 23 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/23/pstip-retrieve-group-membership-of-an-active-directory-group-recursively/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When you need to manage Active Directory, the Active Directory PowerShell module is the first admin choice as it provides many cmdlets for administering and interfacing with various AD objects.</description>
    </item>
    
    <item>
      <title>#PSTip Verify local SAM store account credentials</title>
      <link>https://psmag.github.io/2013/05/22/pstip-verify-local-sam-store-account-credentials/</link>
      <pubDate>Wed, 22 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/22/pstip-verify-local-sam-store-account-credentials/</guid>
      <description>PowerShell provides a nice way of testing if a set of credentials are correct. This can be done by using the System.</description>
    </item>
    
    <item>
      <title>#PSTip Verify Active Directory account credentials using System.DirectoryServices.DirectoryEntry</title>
      <link>https://psmag.github.io/2013/05/21/pstip-verify-active-directory-account-credentials-using-system-directoryservices-directoryentry/</link>
      <pubDate>Tue, 21 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/21/pstip-verify-active-directory-account-credentials-using-system-directoryservices-directoryentry/</guid>
      <description>The System.DirectoryServices.AccountManagement namespace provides a nice way of testing if a set of Active Directory credentials are correct (also discussed in PSTip Validating Active Directory user credentials ).</description>
    </item>
    
    <item>
      <title>#PSTip Adding local users to SQL Server Logins using SMO</title>
      <link>https://psmag.github.io/2013/05/17/pstip-adding-local-users-to-sql-server-logins-using-smo/</link>
      <pubDate>Fri, 17 May 2013 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/17/pstip-adding-local-users-to-sql-server-logins-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
There was a question on StackOverflow about adding local users to SQL Server logins.</description>
    </item>
    
    <item>
      <title>#PSTip List SQL database mirroring partner using SMO</title>
      <link>https://psmag.github.io/2013/05/14/pstip-list-sql-database-mirroring-partner-using-smo/</link>
      <pubDate>Tue, 14 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/14/pstip-list-sql-database-mirroring-partner-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we looked at how to verify if a SQL database is mirrored.</description>
    </item>
    
    <item>
      <title>#PSTip Detecting if the console is in Interactive mode</title>
      <link>https://psmag.github.io/2013/05/13/pstip-detecting-if-the-console-is-in-interactive-mode/</link>
      <pubDate>Mon, 13 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/13/pstip-detecting-if-the-console-is-in-interactive-mode/</guid>
      <description>So, in your scripts you want to gather information from the user who runs it and you use the Read-Host cmdlet.</description>
    </item>
    
    <item>
      <title>#PSTip Verify if a SQL database is mirrored or not</title>
      <link>https://psmag.github.io/2013/05/10/pstip-verify-if-a-sql-database-is-mirrored-or-not/</link>
      <pubDate>Fri, 10 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/10/pstip-verify-if-a-sql-database-is-mirrored-or-not/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When using SQL SMO to work with mirroring configuration, it is essential to verify if the database is mirrored, or not, before performing any other operations.</description>
    </item>
    
    <item>
      <title>#PSTip Working with the Windows.Forms.Screen Class</title>
      <link>https://psmag.github.io/2013/05/09/pstip-working-with-the-windows-forms-screen-class/</link>
      <pubDate>Thu, 09 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/09/pstip-working-with-the-windows-forms-screen-class/</guid>
      <description>When working with Windows PowerShell it can be important to know the screen configuration and resolution of the current computer monitors.</description>
    </item>
    
    <item>
      <title>#PSTip ValidatePattern – Friendlier error messages</title>
      <link>https://psmag.github.io/2013/05/08/pstip-validatepattern-friendlier-error-messages/</link>
      <pubDate>Wed, 08 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/08/pstip-validatepattern-friendlier-error-messages/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
PowerShell has a very nice list of built-in parameter validation attributes. They help validating parameter values before any code runs and give end-user consistent pre-configured error messages:</description>
    </item>
    
    <item>
      <title>#PSTip Validate your custom objects</title>
      <link>https://psmag.github.io/2013/05/07/pstip-validate-your-custom-objects/</link>
      <pubDate>Tue, 07 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/07/pstip-validate-your-custom-objects/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In PowerShell 3.0 validation attributes work for regular variables in the same way they worked previously for parameters.</description>
    </item>
    
    <item>
      <title>#PSTip List all AD attributes currently in use for AD users</title>
      <link>https://psmag.github.io/2013/05/06/pstip-list-all-ad-attributes-currently-in-use-for-ad-users/</link>
      <pubDate>Mon, 06 May 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/05/06/pstip-list-all-ad-attributes-currently-in-use-for-ad-users/</guid>
      <description>This question was asked on the forums recently, is it possible to list all the Active Directory attributes that are currently in use for Active Directory users.</description>
    </item>
    
    <item>
      <title>#PSTip Extending the default output property set for Active Directory objects</title>
      <link>https://psmag.github.io/2013/04/30/pstip-extending-the-default-output-property-set-for-active-directory-objects/</link>
      <pubDate>Tue, 30 Apr 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/30/pstip-extending-the-default-output-property-set-for-active-directory-objects/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When you get user objects from Active Directory using the [Active Directory module cmdlets][1], you get a ‘thin’ output object that includes just a few properties.</description>
    </item>
    
    <item>
      <title>#PSTip Failing over a mirrored SQL database using SMO</title>
      <link>https://psmag.github.io/2013/04/29/pstip-failing-over-a-mirrored-sql-database-using-smo/</link>
      <pubDate>Mon, 29 Apr 2013 06:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/29/pstip-failing-over-a-mirrored-sql-database-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
After I configure SQL mirroring, I usually perform some checks to ensure that the overall mirroring configuration is working fine.</description>
    </item>
    
    <item>
      <title>#PSTip Enumerate Time Zones that support day light savings</title>
      <link>https://psmag.github.io/2013/04/26/pstip-enumerate-time-zones-that-support-day-light-savings/</link>
      <pubDate>Fri, 26 Apr 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/26/pstip-enumerate-time-zones-that-support-day-light-savings/</guid>
      <description>I was recently working on WPF based UI for one of my PowerShell modules and in the process, I had to figure out a way to find out if a selected timezone supports day light savings or not.</description>
    </item>
    
    <item>
      <title>#PSTip List all Active Directory constructed attributes</title>
      <link>https://psmag.github.io/2013/04/25/pstip-list-all-active-directory-constructed-attributes/</link>
      <pubDate>Thu, 25 Apr 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/25/pstip-list-all-active-directory-constructed-attributes/</guid>
      <description>Active Directory has a special kind of attributes called Constructed attributes. Constructed attributes are not “real” attributes, they are not stored in the directory.</description>
    </item>
    
    <item>
      <title>#PSTip Enumerate all SQL Server instances in a network</title>
      <link>https://psmag.github.io/2013/04/24/pstip-enumerate-all-sql-server-instances-in-a-network/</link>
      <pubDate>Wed, 24 Apr 2013 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/24/pstip-enumerate-all-sql-server-instances-in-a-network/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Ever thought about how you can list of all SQL Server instances on the local network?</description>
    </item>
    
    <item>
      <title>#PSTip Get the AD site name of a computer</title>
      <link>https://psmag.github.io/2013/04/23/pstip-get-the-ad-site-name-of-a-computer/</link>
      <pubDate>Tue, 23 Apr 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/23/pstip-get-the-ad-site-name-of-a-computer/</guid>
      <description>There are a few ways to get the site a computer is a member of. In .NET we can use the ActiveDirectorySite class.</description>
    </item>
    
    <item>
      <title>#PSTip Changing SQL database AutoShrink property using SMO and PowerShell</title>
      <link>https://psmag.github.io/2013/04/22/pstip-changing-sql-database-autoshrink-property-using-smo-and-powershell/</link>
      <pubDate>Mon, 22 Apr 2013 18:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/22/pstip-changing-sql-database-autoshrink-property-using-smo-and-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In today’s tip, we will see how we can use SQL SMO and PowerShell to change the AutoShrink property of a SQL database.</description>
    </item>
    
    <item>
      <title>#PSTip PowerShell command-line switch shortcuts</title>
      <link>https://psmag.github.io/2013/04/19/pstip-powershell-command-line-switches-shortcuts/</link>
      <pubDate>Fri, 19 Apr 2013 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/19/pstip-powershell-command-line-switches-shortcuts/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Windows PowerShell allows you to create short names for commands using Aliases. It even allows you to specify short parameter names.</description>
    </item>
    
    <item>
      <title>#PSTip Restoring a SQL Database using SMO</title>
      <link>https://psmag.github.io/2013/04/18/pstip-restoring-a-sql-database-using-smo/</link>
      <pubDate>Thu, 18 Apr 2013 18:00:13 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/18/pstip-restoring-a-sql-database-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In a couple of earlier tips on using SMO, we looked at backing up a SQL database and transaction logs.</description>
    </item>
    
    <item>
      <title>#PSTip Count the number of mailboxes per department</title>
      <link>https://psmag.github.io/2013/04/17/pstip-count-the-number-of-mailboxes-per-department/</link>
      <pubDate>Wed, 17 Apr 2013 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/17/pstip-count-the-number-of-mailboxes-per-department/</guid>
      <description>Yesterday I got an email asking for help to create a report of all user mailboxes in Exchange per department. When you execute a Get-Mailbox command, you’ll see that the Department property is not included in the result.</description>
    </item>
    
    <item>
      <title>#PSTip Backing up SQL transaction log using SMO</title>
      <link>https://psmag.github.io/2013/04/16/pstip-backing-up-sql-transaction-log-using-smo/</link>
      <pubDate>Tue, 16 Apr 2013 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/16/pstip-backing-up-sql-transaction-log-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we looked at how we can use SQL SMO to perform database backup.</description>
    </item>
    
    <item>
      <title>#PSTip Managing Remote Sessions</title>
      <link>https://psmag.github.io/2013/04/15/pstip-managing-remote-sessions/</link>
      <pubDate>Mon, 15 Apr 2013 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/15/pstip-managing-remote-sessions/</guid>
      <description>Note: This tip requires Windows PowerShell 2.0 or above.
The Get-WSManInstance cmdlet can be used to view the sessions that are connected to a remote computer.</description>
    </item>
    
    <item>
      <title>#PSTip Backing up a SQL database using SMO</title>
      <link>https://psmag.github.io/2013/04/12/pstip-backing-up-a-sql-database-using-smo/</link>
      <pubDate>Fri, 12 Apr 2013 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/12/pstip-backing-up-a-sql-database-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In today’s tip, we shall see how we can use SQL Management Objects (SMO) in PowerShell to perform a SQL database backup.</description>
    </item>
    
    <item>
      <title>#PSTip Discovering Active Directory FSMO Role Holders using PowerShell</title>
      <link>https://psmag.github.io/2013/04/11/pstip-discovering-active-directory-fsmo-role-holders-using-powershell/</link>
      <pubDate>Thu, 11 Apr 2013 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/11/pstip-discovering-active-directory-fsmo-role-holders-using-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Active Directory defines five FSMO roles:
 Schema master Domain naming master RID master PDC master Infrastructure master  The first two: schema master and the domain naming master are per-forest roles.</description>
    </item>
    
    <item>
      <title>#PSTip Wait for a Service to reach a specified status</title>
      <link>https://psmag.github.io/2013/04/10/pstip-wait-for-a-service-to-reach-a-specified-status/</link>
      <pubDate>Wed, 10 Apr 2013 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/10/pstip-wait-for-a-service-to-reach-a-specified-status/</guid>
      <description>So, in your script, you need to wait for a service until it reaches a specified status and performs an action based on the new state.</description>
    </item>
    
    <item>
      <title>#PSTip Refreshing service objects</title>
      <link>https://psmag.github.io/2013/04/08/pstip-refreshing-service-objects/</link>
      <pubDate>Mon, 08 Apr 2013 18:00:24 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/08/pstip-refreshing-service-objects/</guid>
      <description>When you assign the result of a service query to a variable, you must take into account one very important thing – the result is just a snapshot of the service state for a specific point in time.</description>
    </item>
    
    <item>
      <title>#PSTip Detecting Wi-Fi adapters</title>
      <link>https://psmag.github.io/2013/04/04/pstip-detecting-wi-fi-adapters/</link>
      <pubDate>Thu, 04 Apr 2013 18:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/04/pstip-detecting-wi-fi-adapters/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Using WMI we can get a list of Wi-Fi adapters with the following command:</description>
    </item>
    
    <item>
      <title>#PSTip List all fixed disk drives visible to SQL Server instance</title>
      <link>https://psmag.github.io/2013/04/03/pstip-list-all-fixed-disk-drives-visible-to-sql-server-instance/</link>
      <pubDate>Wed, 03 Apr 2013 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/03/pstip-list-all-fixed-disk-drives-visible-to-sql-server-instance/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When automating SQL server database creation in PowerShell, we may want to give the end user an option to select from a list of available fixed disk drives and let the user select the drive that should be used for database file creation, etc.</description>
    </item>
    
    <item>
      <title>#PSTip Change SQL Server MaxServerMemory configuration using SMO</title>
      <link>https://psmag.github.io/2013/04/03/pstip-change-sql-server-maxservermemory-configuration-using-smo/</link>
      <pubDate>Wed, 03 Apr 2013 18:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/03/pstip-change-sql-server-maxservermemory-configuration-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
As database administrators, we might want to configure SQL MaxServerMemory setting to ensure the SQL service does not occupy all available physical memory.</description>
    </item>
    
    <item>
      <title>#PSTip View Policy Settings with RSOP WMI classes</title>
      <link>https://psmag.github.io/2013/04/02/pstip-view-policy-settings-with-rsop-wmi-classes/</link>
      <pubDate>Tue, 02 Apr 2013 16:15:05 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/04/02/pstip-view-policy-settings-with-rsop-wmi-classes/</guid>
      <description>Note: This tip requires admin privileges (elevated shell)
To get Resultant Set of Policy (RSOP) data we usually RSOP.mmc or the gpresult command line tool.</description>
    </item>
    
    <item>
      <title>#PSTip Detecting if a certain process is elevated</title>
      <link>https://psmag.github.io/2013/03/29/pstip-detecting-if-a-certain-process-is-elevated/</link>
      <pubDate>Fri, 29 Mar 2013 18:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/29/pstip-detecting-if-a-certain-process-is-elevated/</guid>
      <description>Note: This tip requires PowerShell 3.0
There was a question recently in the PowerShell MVP mailing list about how to detect if a certain process is elevated.</description>
    </item>
    
    <item>
      <title>#PSTip Identifying SQL system objects using SMO</title>
      <link>https://psmag.github.io/2013/03/28/pstip-identifying-sql-system-objects-using-smo/</link>
      <pubDate>Thu, 28 Mar 2013 18:00:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/28/pstip-identifying-sql-system-objects-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
A SQL Server instance, by default, deploys a few system databases such as Temp DB, MSDB, Master, and Model DB.</description>
    </item>
    
    <item>
      <title>#PSTip Generate T-SQL script to clone database tables using SMO</title>
      <link>https://psmag.github.io/2013/03/27/pstip-generate-t-sql-script-to-clone-database-tables-using-smo/</link>
      <pubDate>Wed, 27 Mar 2013 18:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/27/pstip-generate-t-sql-script-to-clone-database-tables-using-smo/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we looked at how we can use SMO in PowerShell to generate T-SQL scripts for cloning databases.</description>
    </item>
    
    <item>
      <title>#PSTip Fixing the output of ConvertTo-Html</title>
      <link>https://psmag.github.io/2013/03/25/pstip-fixing-the-output-of-convertto-html/</link>
      <pubDate>Mon, 25 Mar 2013 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/25/pstip-fixing-the-output-of-convertto-html/</guid>
      <description>When you export PowerShell objects to HTML, using the ConvertTo-Html cmdlet, and HTML links are present as the values of the object, ConvertTo-Html doesn’t render them as HTML links.</description>
    </item>
    
    <item>
      <title>#PSTip Enhancements to implicit remoting in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/03/22/pstip-enhancements-to-implicit-remoting-in-powershell-3-0/</link>
      <pubDate>Fri, 22 Mar 2013 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/22/pstip-enhancements-to-implicit-remoting-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Since PowerShell 2.0 we could use implicit remoting to import cmdlets from a remote PowerShell session into the local PowerShell session:</description>
    </item>
    
    <item>
      <title>#PSTip Working with Excel constants</title>
      <link>https://psmag.github.io/2013/03/20/pstip-working-with-excel-constants/</link>
      <pubDate>Wed, 20 Mar 2013 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/20/pstip-working-with-excel-constants/</guid>
      <description>When automating Microsoft Excel, almost every time you’ll need to include some constant values to define the behaviour of the code.</description>
    </item>
    
    <item>
      <title>#PSTip Generate T-SQL script for cloning a SQL database</title>
      <link>https://psmag.github.io/2013/03/19/pstip-generate-t-sql-script-for-cloning-a-sql-database/</link>
      <pubDate>Tue, 19 Mar 2013 18:00:10 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/19/pstip-generate-t-sql-script-for-cloning-a-sql-database/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
As database administrator, you may want to create a database on development or test servers with similar settings as on the production server.</description>
    </item>
    
    <item>
      <title>#PSTip Get a list of geographical locations</title>
      <link>https://psmag.github.io/2013/03/18/pstip-get-a-list-of-geographical-locations/</link>
      <pubDate>Mon, 18 Mar 2013 18:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/18/pstip-get-a-list-of-geographical-locations/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In a previous tip I wrote about the International module. One of the commands of the module, Get-WinHomeLocation, returns a GeoID object which represents the home location (Country and Region) of the current user account.</description>
    </item>
    
    <item>
      <title>#PSTip Getting Enum values in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/03/15/pstip-getting-enum-values-in-powershell-3-0/</link>
      <pubDate>Fri, 15 Mar 2013 18:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/15/pstip-getting-enum-values-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Prior to PowerShell 3.0, to return a list of names or values of an Enumeration object, we needed to use the static methods of the System.</description>
    </item>
    
    <item>
      <title>#PSTip Change SQL Server default backup folder location</title>
      <link>https://psmag.github.io/2013/03/14/pstip-change-sql-server-default-backup-folder-location/</link>
      <pubDate>Thu, 14 Mar 2013 18:00:29 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/14/pstip-change-sql-server-default-backup-folder-location/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
If you have ever backed up a SQL Server database, you will know that the default backup location is set to the Program Files folder where SQL is installed.</description>
    </item>
    
    <item>
      <title>#PSTip How to configure International settings in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/03/13/pstip-how-to-configure-international-settings-in-powershell-3-0/</link>
      <pubDate>Wed, 13 Mar 2013 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/13/pstip-how-to-configure-international-settings-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Windows 8 and Windows Server 2012 ships with a new module worth exploring: the International module.</description>
    </item>
    
    <item>
      <title>#PSTip Set Windows Firewall status in Windows Server 2012 and Windows 8</title>
      <link>https://psmag.github.io/2013/03/11/pstip-set-windows-firewall-status-in-windows-server-2012-and-windows-8/</link>
      <pubDate>Mon, 11 Mar 2013 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/11/pstip-set-windows-firewall-status-in-windows-server-2012-and-windows-8/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The NetSecurity module in Windows Server 2012 and Windows 8 lets us configure Windows Firewall settings locally and remotely.</description>
    </item>
    
    <item>
      <title>#PSTip How to determine if a file is 32-bit or 64-bit</title>
      <link>https://psmag.github.io/2013/03/08/pstip-how-to-determine-if-a-file-is-32bit-or-64bit/</link>
      <pubDate>Fri, 08 Mar 2013 19:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/08/pstip-how-to-determine-if-a-file-is-32bit-or-64bit/</guid>
      <description>Someone at the office asked me to check why a specific file was failing to execute. When double-clicking the file, nothing happened and no related process could be found in Task Manager.</description>
    </item>
    
    <item>
      <title>#PSTip Finding the drive letter of a mounted disk image</title>
      <link>https://psmag.github.io/2013/03/07/pstip-finding-the-drive-letter-of-a-mounted-disk-image/</link>
      <pubDate>Thu, 07 Mar 2013 19:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/07/pstip-finding-the-drive-letter-of-a-mounted-disk-image/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Windows 8 and Windows Server 2012 included cmdlets to manage storage. One such cmdlet is Mount-DiskImage which can be used to mount ISO, VHD, and VHDX files.</description>
    </item>
    
    <item>
      <title>#PSTip Decoding WinRM error messages</title>
      <link>https://psmag.github.io/2013/03/06/pstip-decoding-winrm-error-messages/</link>
      <pubDate>Wed, 06 Mar 2013 19:00:50 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/06/pstip-decoding-winrm-error-messages/</guid>
      <description>When troubleshooting WinRM errors, you’ll sometime encounter hex error codes, such as 0x80338104, which don’t say much about the error itself.</description>
    </item>
    
    <item>
      <title>#PSTip Automatic refresh of Hyper-V VM Objects</title>
      <link>https://psmag.github.io/2013/03/05/pstip-automatic-refresh-of-hyper-v-vm-objects/</link>
      <pubDate>Tue, 05 Mar 2013 19:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/05/pstip-automatic-refresh-of-hyper-v-vm-objects/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When using the Hyper-V PowerShell cmdlets in Windows Server 2012, the VM objects can be retrieved using Get-VM cmdlet.</description>
    </item>
    
    <item>
      <title>#PSTip Invoking methods with New-Object</title>
      <link>https://psmag.github.io/2013/03/04/pstip-invoking-methods-with-new-object/</link>
      <pubDate>Mon, 04 Mar 2013 19:00:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/03/04/pstip-invoking-methods-with-new-object/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Starting with PowerShell 2.0 we can create new objects and set property values with the Property parameter.</description>
    </item>
    
    <item>
      <title>#PSTip Enabling remote desktop access firewall rules in Windows 8 and Windows Server 2012</title>
      <link>https://psmag.github.io/2013/02/21/pstip-enabling-remote-desktop-access-firewall-rules-in-windows-8-and-windows-server-2012/</link>
      <pubDate>Thu, 21 Feb 2013 19:00:55 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/21/pstip-enabling-remote-desktop-access-firewall-rules-in-windows-8-and-windows-server-2012/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In a couple of earlier posts, we looked at how we can get firewall rules and add new rules.</description>
    </item>
    
    <item>
      <title>#PSTip Get Windows Firewall rule status in Windows 8 and Server 2012</title>
      <link>https://psmag.github.io/2013/02/20/pstip-get-windows-firewall-rule-status-in-windows-8-and-server-2012/</link>
      <pubDate>Wed, 20 Feb 2013 19:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/20/pstip-get-windows-firewall-rule-status-in-windows-8-and-server-2012/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In an earlier tip, we looked at how we can add firewall rules in Windows 8 or Windows Server 2012.</description>
    </item>
    
    <item>
      <title>#PSTip Adding Firewall rules in Windows 8 and Server 2012</title>
      <link>https://psmag.github.io/2013/02/19/pstip-adding-firewall-rules-in-windows-8-and-server-2012/</link>
      <pubDate>Tue, 19 Feb 2013 19:00:30 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/19/pstip-adding-firewall-rules-in-windows-8-and-server-2012/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Before the release of Windows Server 2012 and Windows 8, adding rules to Windows Firewall required a painful approach of using the firewall COM object.</description>
    </item>
    
    <item>
      <title>#PSTip Handling negative TimeSpan objects</title>
      <link>https://psmag.github.io/2013/02/18/pstip-handling-negative-timespan-objects/</link>
      <pubDate>Mon, 18 Feb 2013 19:01:51 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/18/pstip-handling-negative-timespan-objects/</guid>
      <description>Let’s say you created a new TimeSpan object by using the Start parameter.
PS&amp;gt; $ts = New-TimeSpan -Start 1/1/2014 PS&amp;gt; $ts Days : -324 Hours : -9 Minutes : -44 Seconds : -12 Milliseconds : -596 Ticks : -280286525960331 TotalDays : -324.</description>
    </item>
    
    <item>
      <title>#PSTip Validating Active Directory user credentials</title>
      <link>https://psmag.github.io/2013/02/15/pstip-validating-active-directory-user-credentials/</link>
      <pubDate>Fri, 15 Feb 2013 19:01:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/15/pstip-validating-active-directory-user-credentials/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
There are times when you need to validate the credentials of an Active Directory user account.</description>
    </item>
    
    <item>
      <title>#PSTip Quickly load Microsoft KB articles</title>
      <link>https://psmag.github.io/2013/02/14/pstip-quickly-load-microsoft-kb-articles/</link>
      <pubDate>Thu, 14 Feb 2013 23:28:36 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/14/pstip-quickly-load-microsoft-kb-articles/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
As system administrators, when troubleshooting an issue, we are often required to take a look at a certain knowledge base article from Microsoft.</description>
    </item>
    
    <item>
      <title>#PSTip Streaming results from background jobs in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/02/13/pstip-streaming-results-from-background-jobs-in-powershell-3-0/</link>
      <pubDate>Wed, 13 Feb 2013 19:01:35 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/13/pstip-streaming-results-from-background-jobs-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
PowerShell background jobs are very powerful way to achieve parallelism when performing administrative tasks.</description>
    </item>
    
    <item>
      <title>#PSTip Prompt until satisfied</title>
      <link>https://psmag.github.io/2013/02/12/pstip-prompt-until-satisfied/</link>
      <pubDate>Tue, 12 Feb 2013 19:13:31 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/12/pstip-prompt-until-satisfied/</guid>
      <description>Sometimes you need to prompt a user for input so you can base your script upon it. The Read-Host cmdlet is made just for that.</description>
    </item>
    
    <item>
      <title>#PSTip Get-Credential at the command line</title>
      <link>https://psmag.github.io/2013/02/11/pstip-get-credential-at-the-command-line/</link>
      <pubDate>Mon, 11 Feb 2013 19:20:21 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/11/pstip-get-credential-at-the-command-line/</guid>
      <description>PowerShell’s Get-Credential cmdlet lets us create a secure credential object for a specified user name and password using a UI dialog:</description>
    </item>
    
    <item>
      <title>#PSTip Using CIM cmdlets to find the user group membership</title>
      <link>https://psmag.github.io/2013/02/08/pstip-using-cim-cmdlets-to-find-the-user-group-membership/</link>
      <pubDate>Fri, 08 Feb 2013 19:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/08/pstip-using-cim-cmdlets-to-find-the-user-group-membership/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Recently, on Windows Server 2012, I was trying to determine, both locally and remotely, if a user belongs to a specific group.</description>
    </item>
    
    <item>
      <title>#PSTip Index into scalar in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/02/07/pstip-index-into-scalar-in-powershell-3-0/</link>
      <pubDate>Thu, 07 Feb 2013 19:01:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/07/pstip-index-into-scalar-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When you assign the output of a command to a variable, you can’t know in advance how many objects are in the variable.</description>
    </item>
    
    <item>
      <title>#PSTip Validate if proxy credentials are required</title>
      <link>https://psmag.github.io/2013/02/06/pstip-validate-if-proxy-credentials-are-required/</link>
      <pubDate>Wed, 06 Feb 2013 19:01:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/06/pstip-validate-if-proxy-credentials-are-required/</guid>
      <description>I write scripts that include downloading content from the Internet. Now, I want these scripts to work even when I am behind a proxy server.</description>
    </item>
    
    <item>
      <title>#PSTip Argument disambiguation in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/02/05/pstip-argument-disambiguation-in-powershell-3-0/</link>
      <pubDate>Tue, 05 Feb 2013 20:25:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/05/pstip-argument-disambiguation-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When writing commands in PowerShell you can be as formal as:
Get-ChildItem -Include*.</description>
    </item>
    
    <item>
      <title>#PSTip To infinity and beyond!</title>
      <link>https://psmag.github.io/2013/02/04/pstip-to-infinity-and-beyond/</link>
      <pubDate>Mon, 04 Feb 2013 19:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/04/pstip-to-infinity-and-beyond/</guid>
      <description>They say that PowerShell is the ultimate tool that provides almost infinite number of possible applications. So I wondered: What should I do to actually express infinity in PowerShell?</description>
    </item>
    
    <item>
      <title>#PSTip One way to change a file extension</title>
      <link>https://psmag.github.io/2013/02/01/pstip-one-way-to-change-a-file-extension/</link>
      <pubDate>Fri, 01 Feb 2013 19:00:44 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/02/01/pstip-one-way-to-change-a-file-extension/</guid>
      <description>Modifying a file always brings a risk of corrupting it; making a backup copy whenever possible is one of the file manipulation best-practices.</description>
    </item>
    
    <item>
      <title>#PSTip Retrieve a redirected URL – PowerShell 3.0 way!</title>
      <link>https://psmag.github.io/2013/01/31/pstip-retrieve-a-redirected-url-powershell-3-0-way/</link>
      <pubDate>Thu, 31 Jan 2013 19:01:43 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/31/pstip-retrieve-a-redirected-url-powershell-3-0-way/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
In an earlier tip, we looked at how we can retrieve the redirected URL using a .</description>
    </item>
    
    <item>
      <title>#PSTip Retrieve a redirected URL</title>
      <link>https://psmag.github.io/2013/01/29/pstip-retrieve-a-redirected-url/</link>
      <pubDate>Tue, 29 Jan 2013 19:01:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/29/pstip-retrieve-a-redirected-url/</guid>
      <description>When you look at online documentation for resources and downloadable content, you will often find URLs that redirect you to another place.</description>
    </item>
    
    <item>
      <title>The complete list of PowerShell ISE 3.0 keyboard shortcuts</title>
      <link>https://psmag.github.io/2013/01/29/the-complete-list-of-powershell-ise-3-0-keyboard-shortcuts/</link>
      <pubDate>Tue, 29 Jan 2013 17:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/29/the-complete-list-of-powershell-ise-3-0-keyboard-shortcuts/</guid>
      <description>In a previous tip I showed a new hidden keyboard shortcut to transpose lines of code in the ISE. At the PowerShell Facebook group, Dave Carnahan was wondering if there’s a way to pull all of the ISE related hot keys.</description>
    </item>
    
    <item>
      <title>#PSTip Transposing lines in PowerShell ISE</title>
      <link>https://psmag.github.io/2013/01/28/pstip-transposing-lines-in-powershell-ise/</link>
      <pubDate>Mon, 28 Jan 2013 19:01:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/28/pstip-transposing-lines-in-powershell-ise/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
When working in the ISE editor you sometimes need to rearrange lines of code and move them below or above other lines.</description>
    </item>
    
    <item>
      <title>#PSTip Validate if a folder exists</title>
      <link>https://psmag.github.io/2013/01/25/pstip-validate-if-a-folder-exists/</link>
      <pubDate>Fri, 25 Jan 2013 19:00:17 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/25/pstip-validate-if-a-folder-exists/</guid>
      <description>There are multiple ways to verify if a folder exists or not in PowerShell. The below two are my favorite ways of doing it.</description>
    </item>
    
    <item>
      <title>#PSTip Hide users from Welcome Screen</title>
      <link>https://psmag.github.io/2013/01/24/pstip-hide-users-from-welcome-screen/</link>
      <pubDate>Thu, 24 Jan 2013 19:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/24/pstip-hide-users-from-welcome-screen/</guid>
      <description>Windows XP and above allow multiple user accounts to be created on the computer. When the computer is in a workgroup mode and there’s more than one user account defined on that system, Windows will display a Welcome Screen with all available user accounts (as picture icons) , so users can click them to log in into the system.</description>
    </item>
    
    <item>
      <title>#PSTip Passing local variables to a remote session in PowerShell 3.0</title>
      <link>https://psmag.github.io/2013/01/23/pstip-passing-local-variables-to-a-remote-session-in-powershell-3-0/</link>
      <pubDate>Wed, 23 Jan 2013 19:01:58 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/23/pstip-passing-local-variables-to-a-remote-session-in-powershell-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
Passing local variables to a remote session has become a lot easier in PowerShell 3.</description>
    </item>
    
    <item>
      <title>#PSTip How do I determine if my script is running in a RDP session?</title>
      <link>https://psmag.github.io/2013/01/22/pstip-how-do-i-determine-if-my-script-is-running-in-a-rdp-session/</link>
      <pubDate>Tue, 22 Jan 2013 19:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/22/pstip-how-do-i-determine-if-my-script-is-running-in-a-rdp-session/</guid>
      <description>If you list the Environment drive, you’ll find a variable called SESSIONNAME. SESSIONNAME is defined only if the Terminal Services system component is installed.</description>
    </item>
    
    <item>
      <title>#PSTip Count occurrences of a word using a hash table</title>
      <link>https://psmag.github.io/2013/01/21/pstip-count-occurrences-of-a-word-using-a-hash-table/</link>
      <pubDate>Mon, 21 Jan 2013 19:00:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/21/pstip-count-occurrences-of-a-word-using-a-hash-table/</guid>
      <description>On one of the PowerShell forums someone asked for help with getting the 15 most used words in a webpage. The core of the answer to that question is amazingly clever use of a hash table.</description>
    </item>
    
    <item>
      <title>#PSTip Get a random item from an enumeration</title>
      <link>https://psmag.github.io/2013/01/18/pstip-get-a-random-item-from-an-enumeration/</link>
      <pubDate>Fri, 18 Jan 2013 19:01:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/18/pstip-get-a-random-item-from-an-enumeration/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, I showed you how to get the item count in an enumeration.</description>
    </item>
    
    <item>
      <title>#PSTip Get the count of items in an enumeration</title>
      <link>https://psmag.github.io/2013/01/17/pstip-get-the-count-of-items-in-an-enumeration/</link>
      <pubDate>Thu, 17 Jan 2013 19:01:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/17/pstip-get-the-count-of-items-in-an-enumeration/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
I recently got a couple of Blink(1)s and started exploring how I can use them in PowerShell.</description>
    </item>
    
    <item>
      <title>#PSTip Check if the path is relative or absolute</title>
      <link>https://psmag.github.io/2013/01/16/pstip-check-if-the-path-is-relative-or-absolute/</link>
      <pubDate>Wed, 16 Jan 2013 19:00:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/16/pstip-check-if-the-path-is-relative-or-absolute/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
You may want to check if a provided file/folder path is relative or absolute and perform appropriate action based on the result.</description>
    </item>
    
    <item>
      <title>#PSTip List all WMI event classes</title>
      <link>https://psmag.github.io/2013/01/15/pstip-list-all-wmi-event-classes/</link>
      <pubDate>Tue, 15 Jan 2013 19:11:30 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/15/pstip-list-all-wmi-event-classes/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
If you are familiar with Windows Management Instrumentation (WMI), there are different types of WMI queries possible.</description>
    </item>
    
    <item>
      <title>#PSTip Use custom regions to fold code in PowerShell ISE 3.0</title>
      <link>https://psmag.github.io/2013/01/14/pstip-use-custom-regions-to-fold-code-in-powershell-ise-3-0/</link>
      <pubDate>Mon, 14 Jan 2013 19:00:13 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/14/pstip-use-custom-regions-to-fold-code-in-powershell-ise-3-0/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The PowerShell ISE 3.0 brought a lot of new features. One of them is the ability to hide parts of the code by folding them.</description>
    </item>
    
    <item>
      <title>#PSTip How can I determine if I’m in debugging mode?</title>
      <link>https://psmag.github.io/2013/01/10/pstip-how-can-i-determine-if-im-in-debugging-mode/</link>
      <pubDate>Thu, 10 Jan 2013 19:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/10/pstip-how-can-i-determine-if-im-in-debugging-mode/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When a session is being debugged, PowerShell populates an automatic variable called _$PSDebugContext _which contains an object that has Breakpoints and InvocationInfo properties information about the debugging environment.</description>
    </item>
    
    <item>
      <title>#PSTip Resolving an IP Address to host name and vice versa using .NET</title>
      <link>https://psmag.github.io/2013/01/08/pstip-resolving-an-ip-address-to-host-name-and-vice-versa-using-net/</link>
      <pubDate>Tue, 08 Jan 2013 19:00:23 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/08/pstip-resolving-an-ip-address-to-host-name-and-vice-versa-using-net/</guid>
      <description>Note: This tip requires PowerShell 1.0 or above.
In an earlier tip, we showed you how to resolve IP addresses using WMI.</description>
    </item>
    
    <item>
      <title>#PSTip Resolving IP addresses with WMI</title>
      <link>https://psmag.github.io/2013/01/07/pstip-resolving-ip-addresses-with-wmi/</link>
      <pubDate>Mon, 07 Jan 2013 19:00:35 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/07/pstip-resolving-ip-addresses-with-wmi/</guid>
      <description>When we need to resolve addresses, we usually use the System.Net.Dns .NET class methods. In addition to the .NET method, we can also use WMI class–Win32_PingStatus–to achieve this.</description>
    </item>
    
    <item>
      <title>#PSTip How can I tell if I’m in a remote PowerShell session?</title>
      <link>https://psmag.github.io/2013/01/04/pstip-how-can-i-tell-if-im-in-a-remote-powershell-session/</link>
      <pubDate>Fri, 04 Jan 2013 19:00:50 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/04/pstip-how-can-i-tell-if-im-in-a-remote-powershell-session/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
There are times where you’ll want to determine if the session your code is running in is a remoting session.</description>
    </item>
    
    <item>
      <title>#PSTip Monitor file growth using WMI</title>
      <link>https://psmag.github.io/2013/01/03/pstip-monitor-file-growth-using-wmi/</link>
      <pubDate>Thu, 03 Jan 2013 19:00:38 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/03/pstip-monitor-file-growth-using-wmi/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When running long running scripts, we prefer to log the activities performed to a log file.</description>
    </item>
    
    <item>
      <title>#PSTip Working with ISO files</title>
      <link>https://psmag.github.io/2013/01/02/pstip-working-with-iso-files/</link>
      <pubDate>Wed, 02 Jan 2013 19:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/02/pstip-working-with-iso-files/</guid>
      <description>Note: This tip requires PowerShell 3.0 and Windows 8 or above.
Starting with Windows 8, mounting virtual hard disks or ISO files is not an issue anymore.</description>
    </item>
    
    <item>
      <title>#PSTip How to clear the $error variable</title>
      <link>https://psmag.github.io/2013/01/01/pstip-how-to-clear-the-error-variable/</link>
      <pubDate>Tue, 01 Jan 2013 19:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2013/01/01/pstip-how-to-clear-the-error-variable/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
PowerShell has the $error automatic variable. It contains a collection of the errors that occurred while the PowerShell engine has been running.</description>
    </item>
    
    <item>
      <title>#PSTip List all cmdlets that accept a specific object type as input</title>
      <link>https://psmag.github.io/2012/12/31/pstip-list-all-cmdlets-that-accept-a-specific-object-type-as-input/</link>
      <pubDate>Mon, 31 Dec 2012 19:00:10 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/31/pstip-list-all-cmdlets-that-accept-a-specific-object-type-as-input/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
At times, we find the need to list all cmdlets that accept a specific type of object as input.</description>
    </item>
    
    <item>
      <title>#PSTip The easy way to get allowed values</title>
      <link>https://psmag.github.io/2012/12/28/pstip-the-easy-way-to-get-allowed-values/</link>
      <pubDate>Fri, 28 Dec 2012 19:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/28/pstip-the-easy-way-to-get-allowed-values/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Tab completion and IntelliSense (in ISE) are greatly improved in PowerShell 3.0. They provide names of cmdlets, functions, scripts, workflows, parameters, object properties and methods, paths, files, variables, and even enumeration values.</description>
    </item>
    
    <item>
      <title>#PSTip Most frequently used -Verb values</title>
      <link>https://psmag.github.io/2012/12/27/pstip-most-frequently-used-verb-values/</link>
      <pubDate>Thu, 27 Dec 2012 19:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/27/pstip-most-frequently-used-verb-values/</guid>
      <description>In previous tip we saw how to receive all -Verb values for registered extensions. But what if we want to see all available values?</description>
    </item>
    
    <item>
      <title>#PSTip Explore all possible -Verb values for registered file extensions</title>
      <link>https://psmag.github.io/2012/12/26/pstip-explore-all-possible-verb-values-for-registered-file-extensions/</link>
      <pubDate>Wed, 26 Dec 2012 19:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/26/pstip-explore-all-possible-verb-values-for-registered-file-extensions/</guid>
      <description>In previous tips we saw how to find possible values of -Verb parameter and how to use it. What about to check all possible -Verb values for all extensions?</description>
    </item>
    
    <item>
      <title>#PSTip Keeping your help files up to date</title>
      <link>https://psmag.github.io/2012/12/25/pstip-keeping-your-help-files-up-to-date/</link>
      <pubDate>Tue, 25 Dec 2012 19:00:06 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/25/pstip-keeping-your-help-files-up-to-date/</guid>
      <description>Note: This tip requires PowerShell 3.0.
In PowerShell 3.0 you need to run the Update-Help cmdlet in order to stay up-to-date whenever new help content is available.</description>
    </item>
    
    <item>
      <title>#PSTip Working with a Uniform Resource Identifier (URI) in PowerShell</title>
      <link>https://psmag.github.io/2012/12/24/pstip-working-with-a-uniform-resource-identifier-uri-in-powershell/</link>
      <pubDate>Mon, 24 Dec 2012 19:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/24/pstip-working-with-a-uniform-resource-identifier-uri-in-powershell/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
PowerShell offers a powerful method of working with URIs by leveraging the System.</description>
    </item>
    
    <item>
      <title>#PSCXTip Getting details about a command’s parameters</title>
      <link>https://psmag.github.io/2012/12/21/pscxtip-getting-details-about-a-commands-parameters/</link>
      <pubDate>Fri, 21 Dec 2012 19:00:55 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/21/pscxtip-getting-details-about-a-commands-parameters/</guid>
      <description>The parameters for a PowerShell command can be quite complex. Some parameters are only valid in certain parameter sets. Parameters have types, may be mandatory or optional, can have aliases and may or may not support pipeline input.</description>
    </item>
    
    <item>
      <title>#PSCXTip Manipulating file attributes</title>
      <link>https://psmag.github.io/2012/12/20/pscxtip-manipulating-file-attributes/</link>
      <pubDate>Thu, 20 Dec 2012 19:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/20/pscxtip-manipulating-file-attributes/</guid>
      <description>When dealing with files under source control it is quite often useful to be able to make a bunch of files readonly or writable in bulk.</description>
    </item>
    
    <item>
      <title>#PSCXTip Testing XML for well-formedness and validity against a schema</title>
      <link>https://psmag.github.io/2012/12/19/pscxtip-testing-xml-for-well-formedness-and-validity-against-a-schema/</link>
      <pubDate>Wed, 19 Dec 2012 19:00:14 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/19/pscxtip-testing-xml-for-well-formedness-and-validity-against-a-schema/</guid>
      <description>We often deal with XML files whether it is modifying TFS work item templates, C# project files, or our own XML data files.</description>
    </item>
    
    <item>
      <title>#PSCXTip Formatting XML for better readability</title>
      <link>https://psmag.github.io/2012/12/18/pscxtip-formatting-xml-for-better-readability/</link>
      <pubDate>Tue, 18 Dec 2012 19:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/18/pscxtip-formatting-xml-for-better-readability/</guid>
      <description>XML is great for easily storing structured data and is pretty easy to work with in PowerShell. However, sometimes you run across XML that is so poorly formatted you lose out on XML’s human readability.</description>
    </item>
    
    <item>
      <title>#PSCXTip How to determine the byte order mark of a text file</title>
      <link>https://psmag.github.io/2012/12/17/pscxtip-how-to-determine-the-byte-order-mark-of-a-text-file/</link>
      <pubDate>Mon, 17 Dec 2012 19:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/17/pscxtip-how-to-determine-the-byte-order-mark-of-a-text-file/</guid>
      <description>Text files created by PowerShell are little endian Unicode (UTF-16LE) by default. You can see this by inspecting the first couple of bytes of a text file for a BOM i.</description>
    </item>
    
    <item>
      <title>#PSTip Print a Word document using the Start-Process cmdlet</title>
      <link>https://psmag.github.io/2012/12/13/pstip-print-a-word-document-using-start-process-cmdlet/</link>
      <pubDate>Thu, 13 Dec 2012 19:00:47 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/13/pstip-print-a-word-document-using-start-process-cmdlet/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, we saw how we can get the supported verbs for a given file type to use with Start-Process cmdlet.</description>
    </item>
    
    <item>
      <title>#PSTip Explore values that can be used with Start-Process’s -Verb parameter</title>
      <link>https://psmag.github.io/2012/12/12/pstip-explore-values-that-can-be-used-with-start-processs-verb-parameter/</link>
      <pubDate>Wed, 12 Dec 2012 19:00:16 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/12/pstip-explore-values-that-can-be-used-with-start-processs-verb-parameter/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
We know that Start-Process cmdlet can be used to start a new process.</description>
    </item>
    
    <item>
      <title>#PSTip Getting information about a collection object, not its elements</title>
      <link>https://psmag.github.io/2012/12/11/pstip-getting-information-about-a-collection-object-not-its-elements/</link>
      <pubDate>Tue, 11 Dec 2012 19:25:40 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/11/pstip-getting-information-about-a-collection-object-not-its-elements/</guid>
      <description>You have a collection of values in a variable. When you pipe the variable to the Get-Member cmdlet you get the type and members of each item in that collection.</description>
    </item>
    
    <item>
      <title>#PSTip Excluding WMI system properties</title>
      <link>https://psmag.github.io/2012/12/09/pstip-excluding-wmi-system-properties/</link>
      <pubDate>Sun, 09 Dec 2012 10:57:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/09/pstip-excluding-wmi-system-properties/</guid>
      <description>Whenever you use Windows Management Instrumentation (WMI), the result always comes back with a list of system properties. WMI system properties are associated with all classes and instances of classes, and begin with a double underscore.</description>
    </item>
    
    <item>
      <title>#PSTip Use Push-Location to save your current location</title>
      <link>https://psmag.github.io/2012/12/06/pstip-use-push-location-to-save-your-current-location/</link>
      <pubDate>Thu, 06 Dec 2012 19:00:40 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/06/pstip-use-push-location-to-save-your-current-location/</guid>
      <description>Going through folders, you sometimes find yourself in some strangely named ones you are sure you’ll have to revisit again. To avoid searching for the folders after some digging around, use the pushd (Push-Location) command to save your current location to stack.</description>
    </item>
    
    <item>
      <title>#PSTip Generate a zero-byte, temporary file on disk</title>
      <link>https://psmag.github.io/2012/12/04/pstip-generate-a-zero-byte-temporary-file-on-disk/</link>
      <pubDate>Tue, 04 Dec 2012 19:00:42 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/04/pstip-generate-a-zero-byte-temporary-file-on-disk/</guid>
      <description>Note: This tip requires PowerShell 1.0 or above.
In an earlier tip, we showed you how to create a file of the specified size.</description>
    </item>
    
    <item>
      <title>#PSTip Enumerating available time zones</title>
      <link>https://psmag.github.io/2012/12/03/pstip-enumerating-available-time-zones/</link>
      <pubDate>Mon, 03 Dec 2012 19:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/12/03/pstip-enumerating-available-time-zones/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Some applications or scripts might require the presence of a specific time zone on the system to be able to execute the actions defined by the application.</description>
    </item>
    
    <item>
      <title>#PSTip How to quickly open output file</title>
      <link>https://psmag.github.io/2012/11/28/pstip-how-to-quickly-open-output-file/</link>
      <pubDate>Wed, 28 Nov 2012 21:00:28 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/28/pstip-how-to-quickly-open-output-file/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When you work interactively with PowerShell, you don’t want to type too much.</description>
    </item>
    
    <item>
      <title>#PSTip Where are my About help topics for PowerShell workflows and scheduled jobs?</title>
      <link>https://psmag.github.io/2012/11/27/pstip-where-are-my-about-help-topics-for-powershell-workflows-and-scheduled-jobs/</link>
      <pubDate>Tue, 27 Nov 2012 19:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/27/pstip-where-are-my-about-help-topics-for-powershell-workflows-and-scheduled-jobs/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
You’ve updated your PowerShell help using the Update-Help cmdlet and you are pretty sure that you’ve got help files for PSWorkflow and PSScheduledJob modules as well.</description>
    </item>
    
    <item>
      <title>Better Restart-Computer cmdlet in PowerShell 3.0</title>
      <link>https://psmag.github.io/2012/11/27/better-restart-computer-cmdlet-in-powershell-3-0/</link>
      <pubDate>Tue, 27 Nov 2012 17:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/27/better-restart-computer-cmdlet-in-powershell-3-0/</guid>
      <description>As the name suggests the Restart-Computer cmdlet helps in restarting the operating system on the local and remote computers.
Compared to earlier version of Restart-Computer in PowerShell 2.</description>
    </item>
    
    <item>
      <title>#PSTip Duplicating folder structures</title>
      <link>https://psmag.github.io/2012/11/26/pstip-duplicating-folder-structures/</link>
      <pubDate>Mon, 26 Nov 2012 19:00:58 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/26/pstip-duplicating-folder-structures/</guid>
      <description>Sometimes you need to create a copy of an exiting directory structure without copying the files, and you also want to include empty folders if they exist.</description>
    </item>
    
    <item>
      <title>#PSTip Create an empty folder structure</title>
      <link>https://psmag.github.io/2012/11/23/pstip-create-an-empty-folder-structure/</link>
      <pubDate>Fri, 23 Nov 2012 19:00:52 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/23/pstip-create-an-empty-folder-structure/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
In an earlier tip, you saw how an empty file of a specified size can be created.</description>
    </item>
    
    <item>
      <title>#PSTip Create a file of the specified size</title>
      <link>https://psmag.github.io/2012/11/22/pstip-create-a-file-of-the-specified-size/</link>
      <pubDate>Thu, 22 Nov 2012 19:00:18 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/22/pstip-create-a-file-of-the-specified-size/</guid>
      <description>Sometimes you need to create a file of the specified size, as a placeholder for instance. There are many utilities that do that (e.</description>
    </item>
    
    <item>
      <title>#PSTip ForEach-Object Gotcha!</title>
      <link>https://psmag.github.io/2012/11/21/pstip-foreach-object-gotcha/</link>
      <pubDate>Wed, 21 Nov 2012 19:00:40 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/21/pstip-foreach-object-gotcha/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Let’s say you want to rename a bunch of files in a folder and imagine that you used the following code:</description>
    </item>
    
    <item>
      <title>#PSTip PowerShell and the pre-configured user agent strings</title>
      <link>https://psmag.github.io/2012/11/20/pstip-powershell-and-the-pre-configured-user-agent-strings/</link>
      <pubDate>Tue, 20 Nov 2012 23:23:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/20/pstip-powershell-and-the-pre-configured-user-agent-strings/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The Invoke-WebRequest and Invoke-RestMethod cmdlets have the -UserAgent parameter, so you can specify a user agent string for the web request.</description>
    </item>
    
    <item>
      <title>#PSTip Capture console screen</title>
      <link>https://psmag.github.io/2012/11/19/pstip-capture-console-screen/</link>
      <pubDate>Mon, 19 Nov 2012 19:00:31 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/19/pstip-capture-console-screen/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
PowerShell has many logging capabilities but sometimes what you want is to capture what’s already written to the console.</description>
    </item>
    
    <item>
      <title>#PSTip Identifying the name of the PowerShell host</title>
      <link>https://psmag.github.io/2012/11/16/pstip-identifying-the-name-of-the-powershell-host/</link>
      <pubDate>Fri, 16 Nov 2012 19:00:57 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/16/pstip-identifying-the-name-of-the-powershell-host/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
$host automatic variable contains the details of the PowerShell host. For example, information such as the name of the host, UI culture information, etc.</description>
    </item>
    
    <item>
      <title>#PSTip Find PowerShell host process name</title>
      <link>https://psmag.github.io/2012/11/15/pstip-find-powershell-host-process-name/</link>
      <pubDate>Thu, 15 Nov 2012 19:00:50 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/15/pstip-find-powershell-host-process-name/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
Every PowerShell host implements the $pid automatic variable which refers to the process ID of the PowerShell host process.</description>
    </item>
    
    <item>
      <title>#PSTip How to get the email address of the currently logged-on user</title>
      <link>https://psmag.github.io/2012/11/14/pstip-how-to-get-the-email-address-of-the-currently-logged-on-user/</link>
      <pubDate>Wed, 14 Nov 2012 19:00:05 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/14/pstip-how-to-get-the-email-address-of-the-currently-logged-on-user/</guid>
      <description>We’ll use the [adsisearcher] type accelerator. The [adsisearcher] type is just a shortcut to the System.DirectoryServices.DirectorySearcher .NET class.
PS&amp;gt; [adsisearcher].FullName System.</description>
    </item>
    
    <item>
      <title>#PSTip Get the contents of a file in one string</title>
      <link>https://psmag.github.io/2012/11/13/pstip-get-the-contents-of-a-file-in-one-string/</link>
      <pubDate>Tue, 13 Nov 2012 19:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/13/pstip-get-the-contents-of-a-file-in-one-string/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The Get-Content cmdlet returns the contents of a file as an array of strings delimited by a newline character.</description>
    </item>
    
    <item>
      <title>#PSTip A difference between the –replace operator and String.Replace method</title>
      <link>https://psmag.github.io/2012/11/12/pstip-a-difference-between-the-replace-operator-and-string-replace-method/</link>
      <pubDate>Mon, 12 Nov 2012 19:00:25 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/12/pstip-a-difference-between-the-replace-operator-and-string-replace-method/</guid>
      <description>The -replace operator takes a regular expression (regex) replacement rule as input and replaces every match with the replacement string. The operator itself is used as shown in the following schema: &amp;lt;input string&amp;gt; -replace &amp;lt;replacement rule&amp;gt;,&amp;lt;replacement string&amp;gt;</description>
    </item>
    
    <item>
      <title>#PSTip Start PowerShell as a different user with elevated privileges</title>
      <link>https://psmag.github.io/2012/11/09/pstip-start-powershell-as-a-different-user-with-elevated-privileges/</link>
      <pubDate>Fri, 09 Nov 2012 18:51:29 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/09/pstip-start-powershell-as-a-different-user-with-elevated-privileges/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
This command is useful when you want to perform some tests or if you work in an environment where you use the standard and admin user accounts.</description>
    </item>
    
    <item>
      <title>#PSTip Get all WMI classes with methods</title>
      <link>https://psmag.github.io/2012/11/08/pstip-get-all-wmi-classes-with-methods/</link>
      <pubDate>Thu, 08 Nov 2012 19:00:35 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/08/pstip-get-all-wmi-classes-with-methods/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When working with WMI and PowerShell, I often find it necessary to quickly generate a list of methods available in a WMI class.</description>
    </item>
    
    <item>
      <title>#PSTip Grouping objects</title>
      <link>https://psmag.github.io/2012/11/07/pstip-grouping-objects/</link>
      <pubDate>Wed, 07 Nov 2012 19:00:22 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/07/pstip-grouping-objects/</guid>
      <description>The Group-Object cmdlet lets you group objects based on the value of a specified property. For example:
PS&amp;gt; Get-Service | Group-Object -Property Status Count Name Group ----- ---- ----- 93 Stopped {AeLookupSvc, AllUserInstallAgent, AppIDSvc, AppMgmt.</description>
    </item>
    
    <item>
      <title>#PSTip Send the last command executed to clipboard</title>
      <link>https://psmag.github.io/post/2012-11-06-pstip-send-the-last-command-executed-to-clipboard/</link>
      <pubDate>Tue, 06 Nov 2012 19:00:42 +0000</pubDate>
      
      <guid>https://psmag.github.io/post/2012-11-06-pstip-send-the-last-command-executed-to-clipboard/</guid>
      <description>Note: This tip requires PowerShell 2.0 or above.
When I start writing a script, I generally start at the shell and make sure the logic I am working on holds good.</description>
    </item>
    
    <item>
      <title>#PSTip Using UNC paths when working with PowerShell providers</title>
      <link>https://psmag.github.io/2012/11/05/pstip-using-unc-paths-when-working-with-powershell-providers/</link>
      <pubDate>Mon, 05 Nov 2012 19:00:04 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/05/pstip-using-unc-paths-when-working-with-powershell-providers/</guid>
      <description>When working with different PowerShell providers (PSProviders), the use of UNC paths can lead to error messages. This tip will show the pitfalls of using UNC paths when working with PowerShell providers other than the file system.</description>
    </item>
    
    <item>
      <title>#PSTip Access web from PowerShell console</title>
      <link>https://psmag.github.io/2012/11/02/pstip-access-web-from-powershell-console/</link>
      <pubDate>Fri, 02 Nov 2012 18:00:09 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/02/pstip-access-web-from-powershell-console/</guid>
      <description>As I am still running PowerShell 2.0 on my work computer, I can’t use the Invoke-WebRequest cmdlet. This cmdlet is introduced in Windows PowerShell 3.</description>
    </item>
    
    <item>
      <title>#PSTip How to automatically dot-source all scripts in a folder</title>
      <link>https://psmag.github.io/2012/11/01/pstip-how-to-automatically-dot-source-all-scripts-in-a-folder/</link>
      <pubDate>Thu, 01 Nov 2012 18:00:36 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/11/01/pstip-how-to-automatically-dot-source-all-scripts-in-a-folder/</guid>
      <description>As I mentioned in my previous post, I like to have access to (almost) all my scripts on all machines. That’s why I have Scripts folder inside my Dropbox:\PowerShell\Profile.</description>
    </item>
    
    <item>
      <title>#PSTip New PowerShell drive (PSDrive)</title>
      <link>https://psmag.github.io/2012/10/31/pstip-new-powershell-drive-psdrive/</link>
      <pubDate>Wed, 31 Oct 2012 18:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/31/pstip-new-powershell-drive-psdrive/</guid>
      <description>As PowerShell drives are really useful concept, many people use it a lot. I also created some PSDrives for parts of my system I am accessing frequently.</description>
    </item>
    
    <item>
      <title>#PSTip Storing of credentials</title>
      <link>https://psmag.github.io/2012/10/30/pstip-storing-of-credentials/</link>
      <pubDate>Tue, 30 Oct 2012 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/30/pstip-storing-of-credentials/</guid>
      <description>I frequently use different credentials to connect to some of my servers. Oh man, I wish I have just one account J As Configuration Manager is based on WMI, my most frequently used cmdlet is Get-WmiObject.</description>
    </item>
    
    <item>
      <title>#PSTip Script sharing using Dropbox</title>
      <link>https://psmag.github.io/2012/10/29/pstip-script-sharing-using-dropbox-2/</link>
      <pubDate>Mon, 29 Oct 2012 18:00:13 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/29/pstip-script-sharing-using-dropbox-2/</guid>
      <description>When I was asked to provide some PowerShell tips, I decided to look at the first possible place–my $profile. When I started working with PowerShell few years ago I was looking for solution to have scripts available on all of my computers.</description>
    </item>
    
    <item>
      <title>#PSTip Ignoring errors</title>
      <link>https://psmag.github.io/2012/10/26/pstip-ignoring-errors/</link>
      <pubDate>Fri, 26 Oct 2012 18:00:51 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/26/pstip-ignoring-errors/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
PowerShell lets you control how it responds to a non-terminating error (an error that does not stop the cmdlet processing) globally via the $ErrorActionPreference preference variable, or at a cmdlet level using the -ErrorAction parameter.</description>
    </item>
    
    <item>
      <title>#PSTip Sending emails using your Gmail account</title>
      <link>https://psmag.github.io/2012/10/25/pstip-sending-emails-using-your-gmail-account/</link>
      <pubDate>Thu, 25 Oct 2012 18:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/25/pstip-sending-emails-using-your-gmail-account/</guid>
      <description>Note: This tip requires PowerShell 3.0 or above.
The Send-MailMessage cmdlet enables you to quickly and easily send e-mail message from within Windows PowerShell.</description>
    </item>
    
    <item>
      <title>#PSTip CompareTo() method for comparing strings!</title>
      <link>https://psmag.github.io/2012/10/24/pstip-different-method-to-compare-strings/</link>
      <pubDate>Wed, 24 Oct 2012 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/24/pstip-different-method-to-compare-strings/</guid>
      <description>There are certainly many methods to compare strings in PowerShell.
Today, I will show you one of the methods that I recently came across — a less known method, maybe.</description>
    </item>
    
    <item>
      <title>#PSTip Set-StrictMode, why should you care?</title>
      <link>https://psmag.github.io/2012/10/23/pstip-set-strictmode-why-should-you-care/</link>
      <pubDate>Tue, 23 Oct 2012 18:00:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/23/pstip-set-strictmode-why-should-you-care/</guid>
      <description>Consider the following function:
function test { $myNumbersCollection = 1..5 if($myNfunction test { $myNumbersCollection = 1..5umbersColection -contains 3) { &amp;quot;collection contains 3&amp;quot; } else { &amp;quot;collection doesn&#39;t contain 3&amp;quot; } }  By looking at the code it is obvious to the naked eye that the result you should get is: “collection contains 3”.</description>
    </item>
    
    <item>
      <title>#PSTip Quickly generate a password</title>
      <link>https://psmag.github.io/2012/10/22/pstip-quickly-generate-a-password/</link>
      <pubDate>Mon, 22 Oct 2012 18:00:34 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/22/pstip-quickly-generate-a-password/</guid>
      <description>Note: This tip requires PowerShell 2.0 and above
Generating a password usually consists of creating separate collections containing uppercase letters, lowercase letters, numbers and non-alphanumeric characters (@,%,$,^,&amp;amp;,*, etc…) and then randomizing the collections and pulling a specific number from each collection and then randomizing those into a password.</description>
    </item>
    
    <item>
      <title>#PSTip How to speed up the Test-Connection command</title>
      <link>https://psmag.github.io/2012/10/19/pstip-how-to-speed-up-the-test-connection-command/</link>
      <pubDate>Fri, 19 Oct 2012 18:00:35 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/19/pstip-how-to-speed-up-the-test-connection-command/</guid>
      <description>Note: This tip requires PowerShell 2.0 and above
If you only like to know if a computer can be contacted across a network, you can use the Test-Connection cmdlet with the –Quiet parameter.</description>
    </item>
    
    <item>
      <title>#PSTip Get system power information</title>
      <link>https://psmag.github.io/2012/10/18/pstip-get-system-power-information/</link>
      <pubDate>Thu, 18 Oct 2012 18:00:03 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/18/pstip-get-system-power-information/</guid>
      <description>With the PowerStatus class we can quickly get the information status of the current system. The PowerStatus class represents information about the current AC line power status, battery charging status, and battery charge status.</description>
    </item>
    
    <item>
      <title>#PSTip Wait for executable to finish</title>
      <link>https://psmag.github.io/2012/10/17/pstip-wait-for-executable-to-finish/</link>
      <pubDate>Wed, 17 Oct 2012 18:00:00 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/17/pstip-wait-for-executable-to-finish/</guid>
      <description>Sometimes you need to wait for an executable to finish its job. The typical case is a Setup.exe, but this behavior is also ideal candidate for cleaning up temporary files after an application has been closed.</description>
    </item>
    
    <item>
      <title>#PSTip Converting numbers to binary and back</title>
      <link>https://psmag.github.io/2012/10/16/converting-numbers-to-binary-and-back/</link>
      <pubDate>Tue, 16 Oct 2012 18:00:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/16/converting-numbers-to-binary-and-back/</guid>
      <description>To convert a number to its equivalent binary string representation, use the Convert.ToString method with a base of 2.
PS&amp;gt; [Convert]::ToString(192,2) 11000000  To convert a binary number into its decimal representation, use the Convert.</description>
    </item>
    
    <item>
      <title>#PSTip Get your reboot history</title>
      <link>https://psmag.github.io/2012/10/15/pstip-get-your-reboot-history/</link>
      <pubDate>Mon, 15 Oct 2012 18:00:20 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/15/pstip-get-your-reboot-history/</guid>
      <description>Have you ever wondered how often is your station rebooted? Let’s ask the Windows Event Log and get time of last five reboots.</description>
    </item>
    
    <item>
      <title>#PSTip Converting numbers to HEX</title>
      <link>https://psmag.github.io/2012/10/12/pstip-converting-numbers-to-hex/</link>
      <pubDate>Fri, 12 Oct 2012 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/12/pstip-converting-numbers-to-hex/</guid>
      <description>PowerShell can convert Hexadecimal numbers on the command line, just prefix the value with ‘0x’:
PS&amp;gt; 0xAE 174  Converting a number to HEX requires the use of .</description>
    </item>
    
    <item>
      <title>#PSTip How to remove the first line from a text file</title>
      <link>https://psmag.github.io/2012/10/08/pstip-how-to-remove-the-first-line-from-a-text-file/</link>
      <pubDate>Mon, 08 Oct 2012 23:07:51 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/08/pstip-how-to-remove-the-first-line-from-a-text-file/</guid>
      <description>There are a lot of ways to remove the first line from a text file. I hope you will find a multiple assignment technique interesting.</description>
    </item>
    
    <item>
      <title>#PSTip Get old files based on LastWriteTime</title>
      <link>https://psmag.github.io/2012/10/05/pstip-get-old-files-based-on-lastwritetime/</link>
      <pubDate>Fri, 05 Oct 2012 18:00:41 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/05/pstip-get-old-files-based-on-lastwritetime/</guid>
      <description>Note: This tip requires PowerShell 2.0 and above
There are many ways to get the age of a file. The most common way is to subtract the file’s LastWriteTime from the current time:</description>
    </item>
    
    <item>
      <title>#PSTip Working with DateTime objects in PowerShell using [System.DateTime]</title>
      <link>https://psmag.github.io/2012/10/04/pstip-working-with-datetime-objects-in-powershell-using-system-datetime/</link>
      <pubDate>Thu, 04 Oct 2012 18:00:36 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/04/pstip-working-with-datetime-objects-in-powershell-using-system-datetime/</guid>
      <description>When working with dates in PowerShell it is often useful to leverage the .NET Framework System.DateTime class. For example to display the current date and time the Now method can be used:</description>
    </item>
    
    <item>
      <title>#PSTip Find all PowerShell Profiles from $PROFILE</title>
      <link>https://psmag.github.io/2012/10/03/pstip-find-all-powershell-profiles-from-profile/</link>
      <pubDate>Wed, 03 Oct 2012 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/03/pstip-find-all-powershell-profiles-from-profile/</guid>
      <description>Note: This tip requires PowerShell 2.0 and above
I have always wanted to see what all PowerShell profiles are defined and in-use on a system.</description>
    </item>
    
    <item>
      <title>#PSTip Displaying all possible combinations of a flagged enumeration</title>
      <link>https://psmag.github.io/2012/10/02/pstip-displaying-all-possible-combinations-of-a-flagged-enumeration/</link>
      <pubDate>Tue, 02 Oct 2012 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/02/pstip-displaying-all-possible-combinations-of-a-flagged-enumeration/</guid>
      <description>In the last tip, I showed you how to create an enumeration object on which we can do bitwise operations to derive combinational values.</description>
    </item>
    
    <item>
      <title>#PSTip Creating flagged enumerations in PowerShell</title>
      <link>https://psmag.github.io/2012/10/01/pstip-creating-flagged-enumerations-in-powershell/</link>
      <pubDate>Mon, 01 Oct 2012 14:28:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/10/01/pstip-creating-flagged-enumerations-in-powershell/</guid>
      <description>At times, we may want to create an enumeration object in which a combination of different constants means different values or descriptions.</description>
    </item>
    
    <item>
      <title>#PSTip Cmdlet Discovery and Module auto-loading</title>
      <link>https://psmag.github.io/2012/09/27/cmdlet-discovery-and-module-auto-loading/</link>
      <pubDate>Thu, 27 Sep 2012 18:00:36 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/27/cmdlet-discovery-and-module-auto-loading/</guid>
      <description>In PowerShell 3.0, we no longer have to import modules manually to use cmdlets. When we run a cmdlet, Windows PowerShell imports the module that contains the command automatically.</description>
    </item>
    
    <item>
      <title>#PSTip How do you tell which version of a module’s Help files you have installed?</title>
      <link>https://psmag.github.io/2012/09/26/pstip-how-do-you-tell-which-version-of-a-modules-help-files-you-have-installed/</link>
      <pubDate>Wed, 26 Sep 2012 18:00:35 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/26/pstip-how-do-you-tell-which-version-of-a-modules-help-files-you-have-installed/</guid>
      <description>Note: This tip requires PowerShell 3.0.
Before you start using PowerShell 3.0, learn about the Updatable Help feature first. The about_Updatable_Help help topic is a good place to start.</description>
    </item>
    
    <item>
      <title>#PSTip For which system modules have you downloaded updatable help files?</title>
      <link>https://psmag.github.io/2012/09/25/for-which-system-modules-have-you-downloaded-updatable-help-files/</link>
      <pubDate>Tue, 25 Sep 2012 18:07:12 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/25/for-which-system-modules-have-you-downloaded-updatable-help-files/</guid>
      <description>When you run the new Update-Help cmdlet in PowerShell 3.0, it downloads and installs Help files, but you also get HelpInfo XML files.</description>
    </item>
    
    <item>
      <title>#PSTip Advanced object formatting</title>
      <link>https://psmag.github.io/2012/09/24/pstip-advanced-object-formatting/</link>
      <pubDate>Mon, 24 Sep 2012 18:00:29 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/24/pstip-advanced-object-formatting/</guid>
      <description>With the Format-Table cmdlet we format and display a tabular format of an output, We can also select and display output of selected properties of objects.</description>
    </item>
    
    <item>
      <title>#PSTip List all cmdlets with a specified parameter – The PowerShell 3.0 way!</title>
      <link>https://psmag.github.io/2012/09/21/pstip-list-all-cmdlets-with-a-specified-parameter-the-powershell-3-0-way/</link>
      <pubDate>Fri, 21 Sep 2012 18:00:49 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/21/pstip-list-all-cmdlets-with-a-specified-parameter-the-powershell-3-0-way/</guid>
      <description>In Windows PowerShell 2.0, if we had to list a complete list of cmdlets that had a specific parameter, we could have done it in a couple of different ways:</description>
    </item>
    
    <item>
      <title>#PSTip What’s the difference between ${c:\test.txt}, ${c:test.txt}, and ${test.txt}</title>
      <link>https://psmag.github.io/2012/09/20/pstip-whats-the-difference-between-ctest-txt-ctest-txt-and-test-txt/</link>
      <pubDate>Thu, 20 Sep 2012 18:00:58 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/20/pstip-whats-the-difference-between-ctest-txt-ctest-txt-and-test-txt/</guid>
      <description>Each PowerShell drive (PSDrive) has its own notion of current working directory (CurrentLocation):
PS C:\&amp;gt; Get-PSDrive d,c Name Used (GB) Free (GB) Provider Root CurrentLocation ---- --------- --------- -------- ---- --------------- D 295.</description>
    </item>
    
    <item>
      <title>#PSTip How to improve the display of enumerated items</title>
      <link>https://psmag.github.io/2012/09/19/pstip-how-to-improve-the-display-of-enumerated-items/</link>
      <pubDate>Wed, 19 Sep 2012 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/19/pstip-how-to-improve-the-display-of-enumerated-items/</guid>
      <description>When working with objects in the console you may have seen a display that resembles the following:
PS&amp;gt; Get-Process s* | Select-Object Name,Threads -First 5 Name Threads ---- ------- SearchIndexer {5092, 2732, 1100, 2040.</description>
    </item>
    
    <item>
      <title>#PSTip Resolve IP Address or a host name using .NET Framework</title>
      <link>https://psmag.github.io/2012/09/18/pstip-resolve-ip-address-or-a-host-name-using-net-framework/</link>
      <pubDate>Tue, 18 Sep 2012 18:00:32 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/18/pstip-resolve-ip-address-or-a-host-name-using-net-framework/</guid>
      <description>Using the GetHostEntry static method of the .NET Framework System.Net.Dns class it is possible to resolve IP address or a host name:</description>
    </item>
    
    <item>
      <title>#PSTip Get PowerShell Magazine’s daily tips right from your console!</title>
      <link>https://psmag.github.io/2012/09/17/pstip-get-powershell-magazines-daily-tips-right-from-your-console/</link>
      <pubDate>Mon, 17 Sep 2012 18:00:25 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/17/pstip-get-powershell-magazines-daily-tips-right-from-your-console/</guid>
      <description>Our editors at the PowerShell Magazine are doing a great job pushing daily PowerShell tips and tricks to our readers. Now, wouldn’t it be great if you can get access to these tips right from your console?</description>
    </item>
    
    <item>
      <title>#PSTip A quick list of strings</title>
      <link>https://psmag.github.io/2012/09/13/pstip-a-quick-list-of-strings/</link>
      <pubDate>Thu, 13 Sep 2012 18:00:02 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/13/pstip-a-quick-list-of-strings/</guid>
      <description>When you need to create a collection of strings and operate on each of them you’d go with something like:</description>
    </item>
    
    <item>
      <title>#PSTip How to find path to your Documents folder</title>
      <link>https://psmag.github.io/2012/09/12/pstip-how-to-find-path-to-your-documents-folder/</link>
      <pubDate>Wed, 12 Sep 2012 22:21:10 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/12/pstip-how-to-find-path-to-your-documents-folder/</guid>
      <description>It’s pretty easy to find path to your Documents folder with a little help from .NET Framework’s Environment class:
PS&amp;gt; [Environment]::GetFolderPath(&#39;MyDocuments&#39;) C:\Users\Administrator\Documents  You can accomplish the same using the identifier name Personal:</description>
    </item>
    
    <item>
      <title>#PSTip Test files and folders for last write time – the PowerShell 3.0 way!</title>
      <link>https://psmag.github.io/2012/09/11/pstip-test-files-and-folders-for-last-write-time-the-powershell-3-0-way/</link>
      <pubDate>Tue, 11 Sep 2012 18:00:54 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/11/pstip-test-files-and-folders-for-last-write-time-the-powershell-3-0-way/</guid>
      <description>In PowerShell version 2.0, when we had to check if a given file or folder is older or newer, we would do that using:</description>
    </item>
    
    <item>
      <title>#PSTip Preview PowerShell script files in Windows Explorer Preview Pane</title>
      <link>https://psmag.github.io/2012/09/10/pstip-preview-powershell-script-files-in-windows-explorer-preview-pane/</link>
      <pubDate>Mon, 10 Sep 2012 18:00:28 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/10/pstip-preview-powershell-script-files-in-windows-explorer-preview-pane/</guid>
      <description>The Windows Explorer Preview Pane can display the contents of text files, graphics, and other file types without having to use external software.</description>
    </item>
    
    <item>
      <title>#PSTip How to expand environment variable contained in a text file</title>
      <link>https://psmag.github.io/2012/09/07/pstip-how-to-expand-environment-variable-contained-in-a-text-file/</link>
      <pubDate>Fri, 07 Sep 2012 18:00:08 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/07/pstip-how-to-expand-environment-variable-contained-in-a-text-file/</guid>
      <description>Let’s presume you have a text file that contains the following two lines:
My current user profile is $env:USERPROFILE.
The system folder is $env:windir\System32.</description>
    </item>
    
    <item>
      <title>#PSTip Get all writeable properties of a WMI class</title>
      <link>https://psmag.github.io/2012/09/06/pstip-get-all-writeable-properties-of-a-wmi-class/</link>
      <pubDate>Thu, 06 Sep 2012 18:00:11 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/06/pstip-get-all-writeable-properties-of-a-wmi-class/</guid>
      <description>Not all WMI class properties can be modified. Many of these properties are read-only. Take a look at the properties and Win32_ComputerSystem, for example.</description>
    </item>
    
    <item>
      <title>#PSTip Optimizing WMI object retrieval</title>
      <link>https://psmag.github.io/2012/09/05/pstip-optimizing-wmi-object-retrieval/</link>
      <pubDate>Wed, 05 Sep 2012 18:00:15 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/05/pstip-optimizing-wmi-object-retrieval/</guid>
      <description>Whenever we use WMI cmdlets to query either local or remote machines, we need to keep the following points in mind:</description>
    </item>
    
    <item>
      <title>#PSTip Another way to modify WMI instance properties</title>
      <link>https://psmag.github.io/2012/09/04/pstip-another-way-to-modify-wmi-instance-properties/</link>
      <pubDate>Tue, 04 Sep 2012 18:00:16 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/04/pstip-another-way-to-modify-wmi-instance-properties/</guid>
      <description>In the previous tip we showed you how to modify WMI object properties using Get-WmiObject cmdlet and the Put method. Today I want to show you another streamlined way to do the same using the Set-WmiInstance cmdlet.</description>
    </item>
    
    <item>
      <title>#PSTip Modifying WMI Object properties using Get-WmiObject cmdlet</title>
      <link>https://psmag.github.io/2012/09/03/pstip-modifying-wmi-object-properties-using-get-wmiobject-cmdlet/</link>
      <pubDate>Mon, 03 Sep 2012 18:00:01 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/09/03/pstip-modifying-wmi-object-properties-using-get-wmiobject-cmdlet/</guid>
      <description>Get-WmiObject and object modification! Sounds contradictory? Not really. That is the beauty of PowerShell and its object-based nature. Let us see an example to understand this.</description>
    </item>
    
    <item>
      <title>#PSTip Another way to get a function definiton</title>
      <link>https://psmag.github.io/2012/08/31/pstip-another-way-to-get-a-function-definiton/</link>
      <pubDate>Fri, 31 Aug 2012 18:00:51 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/31/pstip-another-way-to-get-a-function-definiton/</guid>
      <description>In the previous tip, we’ve showed you how to get a function definition using cool and unusual technique. Can we use the Get-Command cmdlet to get the same result?</description>
    </item>
    
    <item>
      <title>#PSTip Getting the content of an object</title>
      <link>https://psmag.github.io/2012/08/30/pstip-getting-the-content-of-an-object/</link>
      <pubDate>Thu, 30 Aug 2012 18:00:46 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/30/pstip-getting-the-content-of-an-object/</guid>
      <description>Getting the content of an object is usually done with the Get-Content cmdlet. For example, getting the content of the Windows hosts file:</description>
    </item>
    
    <item>
      <title>#PSTip Adding extended types – the PowerShell 3.0 way!</title>
      <link>https://psmag.github.io/2012/08/29/pstip-adding-extended-types-the-powershell-3-0-way/</link>
      <pubDate>Wed, 29 Aug 2012 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/29/pstip-adding-extended-types-the-powershell-3-0-way/</guid>
      <description>PowerShell 3.0 introduced important changes to the Update-TypeData cmdlet which includes specifying the dynamic type data. Using these new features of Update-TypeData cmdlet, we can add extended types without using the types.</description>
    </item>
    
    <item>
      <title>#PSTip Starting and Stopping services on remote computers</title>
      <link>https://psmag.github.io/2012/08/28/pstip-starting-and-stopping-services-on-remote-computers/</link>
      <pubDate>Tue, 28 Aug 2012 18:00:47 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/28/pstip-starting-and-stopping-services-on-remote-computers/</guid>
      <description>Consider the following PowerShell 2.0 command:
Get-Service -Name wuauserv -ComputerName Server1 | Stop-Service  What do you think is happening here?</description>
    </item>
    
    <item>
      <title>Bartek Bielawski’s Favorite PowerShell Tips and Tricks</title>
      <link>https://psmag.github.io/2012/08/28/bartek-bielawskis-favorite-powershell-tips-and-tricks/</link>
      <pubDate>Tue, 28 Aug 2012 16:00:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/28/bartek-bielawskis-favorite-powershell-tips-and-tricks/</guid>
      <description>I’m kind of guy who loves tiny little tricks. Tricks in PowerShell are almost like Easter eggs in the games of old times, very rewarding when you find them – but in PowerShell besides pure joy of being able to find something cool, you can move it to the next level, add it to your tool belt and use it every single day.</description>
    </item>
    
    <item>
      <title>#PSTip How to get only files – the PowerShell 3.0 way!</title>
      <link>https://psmag.github.io/2012/08/27/pstip-how-to-get-only-files-the-powershell-3-0-way/</link>
      <pubDate>Mon, 27 Aug 2012 19:08:24 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/27/pstip-how-to-get-only-files-the-powershell-3-0-way/</guid>
      <description>The traditional or PowerShell 2.0 way of retrieving only files is:
Get-ChildItem $env:windir | Where-Object { ! $_.PSIsContainer }  The new parameter -File of the Get-ChildItem cmdlet simplifies the filtering:</description>
    </item>
    
    <item>
      <title>#PSTip A hidden gem of the Test-Connection cmdlet</title>
      <link>https://psmag.github.io/2012/08/26/pstip-a-hidden-gem-of-the-test-connection-cmdlet/</link>
      <pubDate>Sun, 26 Aug 2012 10:02:53 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/26/pstip-a-hidden-gem-of-the-test-connection-cmdlet/</guid>
      <description>PowerShell equivalent of the ping.exe utility is the Test-Connection cmdlet. One of the hidden and less known capabilities of Test-Connection is the abitlity to ping a computer using another computer as the source.</description>
    </item>
    
    <item>
      <title>#PSTip Getting WMI associated classes in PowerShell 3.0</title>
      <link>https://psmag.github.io/2012/08/24/pstip-getting-wmi-associated-classes-in-powershell-3-0/</link>
      <pubDate>Fri, 24 Aug 2012 18:00:42 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/24/pstip-getting-wmi-associated-classes-in-powershell-3-0/</guid>
      <description>In Windows PowerShell 2.0, retrieving WMI associations and references required complex WMI queries. For example, if you wanted to get the IP address bound to a particular network adapter using WMI associations you would run:</description>
    </item>
    
    <item>
      <title>#PSTip How to convert .NET Framework objects into HTML</title>
      <link>https://psmag.github.io/2012/08/23/pstip-how-to-convert-net-framework-objects-into-html/</link>
      <pubDate>Thu, 23 Aug 2012 18:00:33 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/23/pstip-how-to-convert-net-framework-objects-into-html/</guid>
      <description>The ConvertTo-Html cmdlet converts Microsoft .NET Framework objects into HTML that can be displayed in a Web browser. In the following example we pick up a few properties of process objects with name that contains the word ‘host’, sort the output by the ‘Handles’ property, convert it to HTML, and save it as HTML file in the user’s TEMP folder.</description>
    </item>
    
    <item>
      <title>#PSTip Getting system modules only</title>
      <link>https://psmag.github.io/2012/08/22/pstip-getting-system-modules-only/</link>
      <pubDate>Wed, 22 Aug 2012 18:00:31 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/22/pstip-getting-system-modules-only/</guid>
      <description>When we use the Get-Module -ListAvailable command to list installed modules, we get a list of modules from two default module locations: one for the system and one for the current user.</description>
    </item>
    
    <item>
      <title>#PSTip How to create a share in Windows Server 2012</title>
      <link>https://psmag.github.io/2012/08/21/pstip-how-to-create-a-share-in-windows-server-2012/</link>
      <pubDate>Tue, 21 Aug 2012 18:00:37 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/21/pstip-how-to-create-a-share-in-windows-server-2012/</guid>
      <description>Quite easy, with a one-liner. Windows Server 2012 provides Windows PowerShell cmdlets and WMI objects to manage SMB file servers and SMB file shares.</description>
    </item>
    
    <item>
      <title>#PSTip Selecting/copying the current line in PowerShell ISE</title>
      <link>https://psmag.github.io/2012/08/20/pstip-selectingcopying-the-current-line-in-powershell-ise/</link>
      <pubDate>Mon, 20 Aug 2012 18:00:46 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/20/pstip-selectingcopying-the-current-line-in-powershell-ise/</guid>
      <description>Windows PowerShell Integrated Scripting Environment (ISE) is my first preferred script editor. Especially, with all the new cool features introduced in version 3.</description>
    </item>
    
    <item>
      <title>#PSTip How to get non-running automatic services</title>
      <link>https://psmag.github.io/2012/08/17/pstip-how-to-get-non-running-automatic-services/</link>
      <pubDate>Fri, 17 Aug 2012 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/17/pstip-how-to-get-non-running-automatic-services/</guid>
      <description>The Startup type information is not available when we use the Get-Service cmdlet. Luckily the Win32_Service WMI class has a StartMode property that we can use to create a nice server-side filter.</description>
    </item>
    
    <item>
      <title>#PSTip Persistent file system drives</title>
      <link>https://psmag.github.io/2012/08/16/pstip-persistent-file-system-drives/</link>
      <pubDate>Thu, 16 Aug 2012 18:00:30 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/16/pstip-persistent-file-system-drives/</guid>
      <description>In the previous tip we showed you how to get the next available drive letter using the Get-AvailableDriveLetter function when we want to create a new mapped network drive.</description>
    </item>
    
    <item>
      <title>#PSTip Get next available drive letter</title>
      <link>https://psmag.github.io/2012/08/15/pstip-get-next-available-drive-letter/</link>
      <pubDate>Wed, 15 Aug 2012 21:46:45 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/08/15/pstip-get-next-available-drive-letter/</guid>
      <description>Mapping drives is a routine task for IT pros—you choose a free drive letter, ranging from A-Z, and then use it to map a drive to a specific path.</description>
    </item>
    
    <item>
      <title>Jaap Brasser’s Favorite PowerShell Tips and Tricks</title>
      <link>https://psmag.github.io/2012/07/24/jaap-brassers-favorite-powershell-tips-and-tricks/</link>
      <pubDate>Tue, 24 Jul 2012 12:00:55 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/07/24/jaap-brassers-favorite-powershell-tips-and-tricks/</guid>
      <description>When I met up with Aleksandar Nikolic at TechEd Europe I was asked if I wanted to write an article for PowerShell Magazine.</description>
    </item>
    
    <item>
      <title>Mike F Robbins’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/27/mike-f-robbinss-favorite-powershell-tips-tricks/</link>
      <pubDate>Wed, 27 Jun 2012 18:00:04 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/27/mike-f-robbinss-favorite-powershell-tips-tricks/</guid>
      <description>Instead of an introduction about what I was asked to do and how I went about it, I decided to cut to the chase and give you a bonus tip on how to learn a PowerShell cmdlet a day.</description>
    </item>
    
    <item>
      <title>Boe Prox’ Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/20/boe-prox-favorite-powershell-tips-tricks/</link>
      <pubDate>Wed, 20 Jun 2012 18:00:52 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/20/boe-prox-favorite-powershell-tips-tricks/</guid>
      <description>I was asked to come up with a list of 3 PowerShell tips that I use. This was a tough task to come up with because there are just so many tips that I would like to share.</description>
    </item>
    
    <item>
      <title>Alan Renouf’s Favorite PowerShell Tips and Tricks</title>
      <link>https://psmag.github.io/2012/06/15/alan-renoufs-favorite-powershell-tips-and-tricks/</link>
      <pubDate>Fri, 15 Jun 2012 18:00:07 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/15/alan-renoufs-favorite-powershell-tips-and-tricks/</guid>
      <description>When using anything in life with so many features and items you find useful every day of your life how do you narrow it down to 3?</description>
    </item>
    
    <item>
      <title>Will Steele’s Favorite PowerShell Tips and Tricks</title>
      <link>https://psmag.github.io/2012/06/13/will-steeles-favorite-powershell-tips-and-tricks/</link>
      <pubDate>Wed, 13 Jun 2012 18:00:59 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/13/will-steeles-favorite-powershell-tips-and-tricks/</guid>
      <description>Having been asked to share some PowerShell tips and tricks I first got excited at the possibility, then, felt a small spell of writer’s block.</description>
    </item>
    
    <item>
      <title>Adam Driscoll’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/11/adam-driscolls-favorite-powershell-tips-tricks/</link>
      <pubDate>Mon, 11 Jun 2012 18:00:30 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/11/adam-driscolls-favorite-powershell-tips-tricks/</guid>
      <description>I am a developer by trade and primarily use PowerShell to aid in my development practices. The majority of the time I’m a .</description>
    </item>
    
    <item>
      <title>Jonathan Medd’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/07/jonathan-medds-favorite-powershell-tips-tricks/</link>
      <pubDate>Thu, 07 Jun 2012 18:00:30 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/07/jonathan-medds-favorite-powershell-tips-tricks/</guid>
      <description>Choose three of your favourite PowerShell tips they said. Pretty impossible to only feature three, so in the end I have picked a few that I have been working with recently.</description>
    </item>
    
    <item>
      <title>Claus Nielsen’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/05/claus-nielsens-favorite-powershell-tips-tricks/</link>
      <pubDate>Tue, 05 Jun 2012 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/05/claus-nielsens-favorite-powershell-tips-tricks/</guid>
      <description>I use PowerShell practically every day, and I would like to share a few tips and tricks that I use quite often.</description>
    </item>
    
    <item>
      <title>Jan Egil Ring’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/06/03/jan-egil-rings-favorite-powershell-tips-tricks/</link>
      <pubDate>Sun, 03 Jun 2012 18:00:39 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/06/03/jan-egil-rings-favorite-powershell-tips-tricks/</guid>
      <description>Disclaimer: This article is written based on the PowerShell 3.0 version available in the Windows 8 Consumer Preview. Features described may change in the final version of the product.</description>
    </item>
    
    <item>
      <title>Luc Dekens’ Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/05/31/luc-dekens-favorite-powershell-tips-tricks/</link>
      <pubDate>Thu, 31 May 2012 18:00:28 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/05/31/luc-dekens-favorite-powershell-tips-tricks/</guid>
      <description>I was asked to write about 3 PowerShell features I particularly like. Piece of cake I thought. But with the abundance of possibilities available in PowerShell, the selection of my 3 favorite features proved to be more difficult than I imagined.</description>
    </item>
    
    <item>
      <title>Keith Hill’s Favorite PowerShell Tips &amp; Tricks</title>
      <link>https://psmag.github.io/2012/05/29/keith-hills-favorite-powershell-tips-tricks/</link>
      <pubDate>Tue, 29 May 2012 18:00:56 +0000</pubDate>
      
      <guid>https://psmag.github.io/2012/05/29/keith-hills-favorite-powershell-tips-tricks/</guid>
      <description>ScriptBlock Binding to Pipeline Bound Parameters I see many PowerShell snippets on Stack Overflow that look similar to one below:</description>
    </item>
    
    <item>
      <title>Rally the orphan processes</title>
      <link>https://psmag.github.io/2011/09/22/rally-the-orphan-processes/</link>
      <pubDate>Thu, 22 Sep 2011 13:34:26 +0000</pubDate>
      
      <guid>https://psmag.github.io/2011/09/22/rally-the-orphan-processes/</guid>
      <description>Some processes start child processes; they are set up that way. Sometimes, when the parent process stops, or it is stopped, some of the child processes remain running.</description>
    </item>
    
    <item>
      <title>How to find out what’s new in PowerShell vNext</title>
      <link>https://psmag.github.io/2011/09/15/how-to-find-out-whats-new-in-powershell-vnext/</link>
      <pubDate>Wed, 14 Sep 2011 19:49:50 +0000</pubDate>
      
      <guid>https://psmag.github.io/2011/09/15/how-to-find-out-whats-new-in-powershell-vnext/</guid>
      <description>Windows 8 Developer Preview (pre-beta version) was released for public at the BUILD conference (you can download it HERE) and it is packaged with PowerShell v3 and a ton of goodies!</description>
    </item>
    
    <item>
      <title>Finding Old Files</title>
      <link>https://psmag.github.io/2011/09/11/finding-old-files/</link>
      <pubDate>Sun, 11 Sep 2011 14:11:52 +0000</pubDate>
      
      <guid>https://psmag.github.io/2011/09/11/finding-old-files/</guid>
      <description>When it comes to finding old files in PowerShell we have several options, all in which involve subtracting DateTime objects or using comparison operators.</description>
    </item>
    
  </channel>
</rss>